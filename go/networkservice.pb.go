// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkservice.proto

/*
Package networkservice is a generated protocol buffer package.

It is generated from these files:
	networkservice.proto

It has these top-level messages:
	DiscoverServiceRequest
	ServiceDiscoveryResponse
	PublishServiceRequest
	PublishServiceResponse
	DelistServiceRequest
	DelistServiceResponse
	ExposeChannelRequest
	ExposeChannelResponse
	ConcealChannelRequest
	ConcealChannelResponse
	CreateSessionRequest
	CreateSessionResponse
	DestroySessionRequest
	DestroySessionResponse
*/
package networkservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DiscoverServiceRequest struct {
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DiscoverServiceRequest) Reset()                    { *m = DiscoverServiceRequest{} }
func (m *DiscoverServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverServiceRequest) ProtoMessage()               {}
func (*DiscoverServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DiscoverServiceRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ServiceDiscoveryResponse struct {
	ServiceIds []string `protobuf:"bytes,1,rep,name=service_ids,json=serviceIds" json:"service_ids,omitempty"`
}

func (m *ServiceDiscoveryResponse) Reset()                    { *m = ServiceDiscoveryResponse{} }
func (m *ServiceDiscoveryResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceDiscoveryResponse) ProtoMessage()               {}
func (*ServiceDiscoveryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceDiscoveryResponse) GetServiceIds() []string {
	if m != nil {
		return m.ServiceIds
	}
	return nil
}

type PublishServiceRequest struct {
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PublishServiceRequest) Reset()                    { *m = PublishServiceRequest{} }
func (m *PublishServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishServiceRequest) ProtoMessage()               {}
func (*PublishServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PublishServiceRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PublishServiceResponse struct {
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
}

func (m *PublishServiceResponse) Reset()                    { *m = PublishServiceResponse{} }
func (m *PublishServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishServiceResponse) ProtoMessage()               {}
func (*PublishServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PublishServiceResponse) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

type DelistServiceRequest struct {
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
}

func (m *DelistServiceRequest) Reset()                    { *m = DelistServiceRequest{} }
func (m *DelistServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DelistServiceRequest) ProtoMessage()               {}
func (*DelistServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelistServiceRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

type DelistServiceResponse struct {
}

func (m *DelistServiceResponse) Reset()                    { *m = DelistServiceResponse{} }
func (m *DelistServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DelistServiceResponse) ProtoMessage()               {}
func (*DelistServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ExposeChannelRequest struct {
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ExposeChannelRequest) Reset()                    { *m = ExposeChannelRequest{} }
func (m *ExposeChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*ExposeChannelRequest) ProtoMessage()               {}
func (*ExposeChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExposeChannelRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ExposeChannelResponse struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *ExposeChannelResponse) Reset()                    { *m = ExposeChannelResponse{} }
func (m *ExposeChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*ExposeChannelResponse) ProtoMessage()               {}
func (*ExposeChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExposeChannelResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type ConcealChannelRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *ConcealChannelRequest) Reset()                    { *m = ConcealChannelRequest{} }
func (m *ConcealChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*ConcealChannelRequest) ProtoMessage()               {}
func (*ConcealChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConcealChannelRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type ConcealChannelResponse struct {
}

func (m *ConcealChannelResponse) Reset()                    { *m = ConcealChannelResponse{} }
func (m *ConcealChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*ConcealChannelResponse) ProtoMessage()               {}
func (*ConcealChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CreateSessionRequest struct {
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateSessionRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type CreateSessionResponse struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *CreateSessionResponse) Reset()                    { *m = CreateSessionResponse{} }
func (m *CreateSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionResponse) ProtoMessage()               {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateSessionResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type DestroySessionRequest struct {
}

func (m *DestroySessionRequest) Reset()                    { *m = DestroySessionRequest{} }
func (m *DestroySessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroySessionRequest) ProtoMessage()               {}
func (*DestroySessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type DestroySessionResponse struct {
}

func (m *DestroySessionResponse) Reset()                    { *m = DestroySessionResponse{} }
func (m *DestroySessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DestroySessionResponse) ProtoMessage()               {}
func (*DestroySessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*DiscoverServiceRequest)(nil), "DiscoverServiceRequest")
	proto.RegisterType((*ServiceDiscoveryResponse)(nil), "ServiceDiscoveryResponse")
	proto.RegisterType((*PublishServiceRequest)(nil), "PublishServiceRequest")
	proto.RegisterType((*PublishServiceResponse)(nil), "PublishServiceResponse")
	proto.RegisterType((*DelistServiceRequest)(nil), "DelistServiceRequest")
	proto.RegisterType((*DelistServiceResponse)(nil), "DelistServiceResponse")
	proto.RegisterType((*ExposeChannelRequest)(nil), "ExposeChannelRequest")
	proto.RegisterType((*ExposeChannelResponse)(nil), "ExposeChannelResponse")
	proto.RegisterType((*ConcealChannelRequest)(nil), "ConcealChannelRequest")
	proto.RegisterType((*ConcealChannelResponse)(nil), "ConcealChannelResponse")
	proto.RegisterType((*CreateSessionRequest)(nil), "CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "CreateSessionResponse")
	proto.RegisterType((*DestroySessionRequest)(nil), "DestroySessionRequest")
	proto.RegisterType((*DestroySessionResponse)(nil), "DestroySessionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServices service

type NetworkServicesClient interface {
	DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*ServiceDiscoveryResponse, error)
	PublishService(ctx context.Context, in *PublishServiceRequest, opts ...grpc.CallOption) (*PublishServiceResponse, error)
	DelistService(ctx context.Context, in *DelistServiceRequest, opts ...grpc.CallOption) (*DelistServiceResponse, error)
	ExposeChannel(ctx context.Context, in *ExposeChannelRequest, opts ...grpc.CallOption) (*ExposeChannelResponse, error)
	ConcealChannel(ctx context.Context, in *ConcealChannelRequest, opts ...grpc.CallOption) (*ConcealChannelResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*DestroySessionResponse, error)
}

type networkServicesClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServicesClient(cc *grpc.ClientConn) NetworkServicesClient {
	return &networkServicesClient{cc}
}

func (c *networkServicesClient) DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*ServiceDiscoveryResponse, error) {
	out := new(ServiceDiscoveryResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/DiscoverService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) PublishService(ctx context.Context, in *PublishServiceRequest, opts ...grpc.CallOption) (*PublishServiceResponse, error) {
	out := new(PublishServiceResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/PublishService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DelistService(ctx context.Context, in *DelistServiceRequest, opts ...grpc.CallOption) (*DelistServiceResponse, error) {
	out := new(DelistServiceResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/DelistService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ExposeChannel(ctx context.Context, in *ExposeChannelRequest, opts ...grpc.CallOption) (*ExposeChannelResponse, error) {
	out := new(ExposeChannelResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/ExposeChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ConcealChannel(ctx context.Context, in *ConcealChannelRequest, opts ...grpc.CallOption) (*ConcealChannelResponse, error) {
	out := new(ConcealChannelResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/ConcealChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*DestroySessionResponse, error) {
	out := new(DestroySessionResponse)
	err := grpc.Invoke(ctx, "/NetworkServices/DestroySession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServices service

type NetworkServicesServer interface {
	DiscoverService(context.Context, *DiscoverServiceRequest) (*ServiceDiscoveryResponse, error)
	PublishService(context.Context, *PublishServiceRequest) (*PublishServiceResponse, error)
	DelistService(context.Context, *DelistServiceRequest) (*DelistServiceResponse, error)
	ExposeChannel(context.Context, *ExposeChannelRequest) (*ExposeChannelResponse, error)
	ConcealChannel(context.Context, *ConcealChannelRequest) (*ConcealChannelResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DestroySession(context.Context, *DestroySessionRequest) (*DestroySessionResponse, error)
}

func RegisterNetworkServicesServer(s *grpc.Server, srv NetworkServicesServer) {
	s.RegisterService(&_NetworkServices_serviceDesc, srv)
}

func _NetworkServices_DiscoverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DiscoverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/DiscoverService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DiscoverService(ctx, req.(*DiscoverServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_PublishService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).PublishService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/PublishService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).PublishService(ctx, req.(*PublishServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DelistService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelistServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DelistService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/DelistService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DelistService(ctx, req.(*DelistServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ExposeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ExposeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/ExposeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ExposeChannel(ctx, req.(*ExposeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ConcealChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcealChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ConcealChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/ConcealChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ConcealChannel(ctx, req.(*ConcealChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DestroySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DestroySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkServices/DestroySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DestroySession(ctx, req.(*DestroySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NetworkServices",
	HandlerType: (*NetworkServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverService",
			Handler:    _NetworkServices_DiscoverService_Handler,
		},
		{
			MethodName: "PublishService",
			Handler:    _NetworkServices_PublishService_Handler,
		},
		{
			MethodName: "DelistService",
			Handler:    _NetworkServices_DelistService_Handler,
		},
		{
			MethodName: "ExposeChannel",
			Handler:    _NetworkServices_ExposeChannel_Handler,
		},
		{
			MethodName: "ConcealChannel",
			Handler:    _NetworkServices_ConcealChannel_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _NetworkServices_CreateSession_Handler,
		},
		{
			MethodName: "DestroySession",
			Handler:    _NetworkServices_DestroySession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkservice.proto",
}

func init() { proto.RegisterFile("networkservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0xc6, 0x1b, 0xba, 0x90, 0x09, 0xcd, 0x16, 0x61, 0xcb, 0xae, 0xa0, 0x74, 0xeb, 0x5e, 0xf6,
	0xa4, 0xc3, 0x96, 0xfe, 0xec, 0x2e, 0x14, 0x42, 0x36, 0x87, 0x40, 0x29, 0xc5, 0x79, 0x80, 0xe2,
	0x38, 0x03, 0x31, 0x31, 0x56, 0x6a, 0x39, 0x69, 0xfd, 0x0e, 0xa5, 0xf4, 0x15, 0xfb, 0x26, 0xc5,
	0xb6, 0xd2, 0x58, 0x42, 0x26, 0x97, 0xf4, 0x66, 0x8f, 0xe6, 0xd3, 0xcc, 0x37, 0xdf, 0x37, 0x02,
	0x37, 0xc7, 0xf2, 0xbb, 0x28, 0x36, 0x12, 0x8b, 0x7d, 0x9a, 0x20, 0xdf, 0x16, 0xa2, 0x14, 0xe1,
	0x6f, 0x07, 0xe8, 0x63, 0x2a, 0x13, 0xb1, 0xc7, 0x62, 0xd1, 0x9e, 0x44, 0xf8, 0x6d, 0x87, 0xb2,
	0x24, 0x0f, 0x70, 0x99, 0xc5, 0x4b, 0xcc, 0x64, 0xe0, 0x5c, 0x0f, 0x6e, 0x46, 0xb7, 0xaf, 0xb9,
	0x3d, 0x91, 0x7f, 0x6a, 0xb2, 0x66, 0x79, 0x59, 0x54, 0x91, 0x82, 0xb0, 0x3b, 0x18, 0x75, 0xc2,
	0xe4, 0x19, 0x0c, 0x36, 0x58, 0x05, 0xce, 0xb5, 0x73, 0x33, 0x8c, 0xea, 0x4f, 0xe2, 0xc2, 0x93,
	0x7d, 0x9c, 0xed, 0x30, 0xb8, 0x68, 0x62, 0xed, 0xcf, 0xfd, 0xc5, 0x07, 0x27, 0x7c, 0x80, 0x40,
	0x15, 0x38, 0xd4, 0xab, 0x22, 0x94, 0x5b, 0x91, 0x4b, 0x24, 0x2f, 0x61, 0xa4, 0xfa, 0xff, 0x9a,
	0xae, 0xda, 0xc6, 0x86, 0x11, 0xa8, 0xd0, 0x7c, 0x25, 0xc3, 0x5f, 0x0e, 0x78, 0x5f, 0x76, 0xcb,
	0x2c, 0x95, 0x6b, 0x83, 0xce, 0xbd, 0x41, 0x27, 0xe4, 0xd6, 0xbc, 0x73, 0xb3, 0x79, 0x0f, 0xd4,
	0xac, 0xa3, 0xb8, 0xbc, 0x00, 0x38, 0x72, 0x51, 0x97, 0x0d, 0xff, 0x51, 0x09, 0xdf, 0x82, 0xfb,
	0x88, 0x59, 0x2a, 0x4b, 0x83, 0xc7, 0x09, 0x98, 0x0f, 0x9e, 0x01, 0x6b, 0xcb, 0x85, 0x3f, 0x1d,
	0x70, 0x67, 0x3f, 0xb6, 0x42, 0xe2, 0x74, 0x1d, 0xe7, 0x39, 0x66, 0x87, 0x0b, 0xef, 0x8c, 0xc1,
	0xbc, 0xe2, 0xb6, 0xb4, 0x73, 0xcf, 0xe5, 0x1d, 0x78, 0x46, 0x99, 0xe3, 0x58, 0x92, 0x36, 0xd4,
	0xe1, 0xa7, 0x22, 0xf3, 0x55, 0x8d, 0x9b, 0x8a, 0x3c, 0xc1, 0x38, 0x33, 0x68, 0x9c, 0xc0, 0x05,
	0x40, 0x4d, 0x5c, 0x67, 0x30, 0xd3, 0x02, 0xe3, 0x12, 0x17, 0x28, 0x65, 0x2a, 0xf2, 0xfe, 0xc1,
	0xd8, 0xd2, 0xfe, 0xc3, 0x60, 0x8c, 0x32, 0x5d, 0xbf, 0x34, 0x21, 0x4d, 0xf8, 0x26, 0x72, 0x10,
	0x5e, 0x96, 0x85, 0xa8, 0xf4, 0xfe, 0x6a, 0xe6, 0xe6, 0x41, 0x7b, 0xe3, 0xed, 0x9f, 0x01, 0x5c,
	0x7d, 0x6e, 0x5f, 0x05, 0xe5, 0x16, 0x49, 0x66, 0x70, 0x65, 0xac, 0x39, 0xf1, 0x7b, 0x16, 0x9f,
	0x3d, 0xe7, 0xbd, 0x8b, 0x3a, 0x81, 0xb1, 0x6e, 0x7b, 0x42, 0xed, 0xfb, 0xc6, 0x7c, 0xde, 0xb3,
	0x1f, 0x1f, 0xe1, 0xa9, 0xe6, 0x64, 0xe2, 0x71, 0xdb, 0x42, 0x30, 0xca, 0xad, 0x86, 0xaf, 0xf1,
	0x9a, 0xc3, 0x88, 0x67, 0x35, 0x36, 0xa3, 0xdc, 0x6e, 0xc4, 0x09, 0x8c, 0x75, 0xc7, 0x10, 0xca,
	0xad, 0xd6, 0x63, 0x3e, 0xb7, 0x5b, 0xab, 0x6e, 0x41, 0xd3, 0x92, 0x78, 0x56, 0x0b, 0x31, 0xca,
	0xed, 0x92, 0x4f, 0x60, 0xac, 0x4b, 0x47, 0x6a, 0xb2, 0x16, 0x91, 0x99, 0xcf, 0xed, 0x1a, 0x2f,
	0x2f, 0x9b, 0x77, 0xfe, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x01, 0x7f, 0xc9, 0xff,
	0x05, 0x00, 0x00,
}

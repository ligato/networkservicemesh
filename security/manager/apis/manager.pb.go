// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager.proto

package manager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerClient interface {
	CertificatesUpdated(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CertificatesUpdated(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Manager/CertificatesUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
type ManagerServer interface {
	CertificatesUpdated(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_CertificatesUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CertificatesUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manager/CertificatesUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CertificatesUpdated(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CertificatesUpdated",
			Handler:    _Manager_CertificatesUpdated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor_cde9ec64f0d2c859) }

var fileDescriptor_cde9ec64f0d2c859 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0xcc, 0x4b,
	0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x32, 0x4e, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x07, 0x4b, 0x24,
	0x95, 0xa6, 0xe9, 0x17, 0x94, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42,
	0x48, 0x88, 0x26, 0xa3, 0x00, 0x2e, 0x76, 0x5f, 0x88, 0x29, 0x42, 0xae, 0x5c, 0xc2, 0xce, 0xa9,
	0x45, 0x25, 0x99, 0x69, 0x99, 0xc9, 0x89, 0x25, 0xa9, 0xc5, 0xa1, 0x05, 0x29, 0x89, 0x25, 0xa9,
	0x29, 0x42, 0x62, 0x7a, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0x7a, 0x30, 0xc3, 0xf4, 0x5c, 0x41,
	0xfa, 0xa5, 0x70, 0x88, 0x27, 0xb1, 0x81, 0xf9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73,
	0x48, 0x85, 0x7b, 0x9e, 0x00, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crossconnect.proto

package crossconnect

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	connection "github.com/networkservicemesh/networkservicemesh/controlplane/api/connection"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrossConnectEventType int32

const (
	CrossConnectEventType_INITIAL_STATE_TRANSFER CrossConnectEventType = 0
	CrossConnectEventType_UPDATE                 CrossConnectEventType = 1
	CrossConnectEventType_DELETE                 CrossConnectEventType = 2
)

var CrossConnectEventType_name = map[int32]string{
	0: "INITIAL_STATE_TRANSFER",
	1: "UPDATE",
	2: "DELETE",
}

var CrossConnectEventType_value = map[string]int32{
	"INITIAL_STATE_TRANSFER": 0,
	"UPDATE":                 1,
	"DELETE":                 2,
}

func (x CrossConnectEventType) String() string {
	return proto.EnumName(CrossConnectEventType_name, int32(x))
}

func (CrossConnectEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97acf85fcaabb3f6, []int{0}
}

type Metrics struct {
	Metrics              map[string]string `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_97acf85fcaabb3f6, []int{0}
}

func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics.Unmarshal(m, b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return xxx_messageInfo_Metrics.Size(m)
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetMetrics() map[string]string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CrossConnectEvent struct {
	Type                 CrossConnectEventType    `protobuf:"varint,1,opt,name=type,proto3,enum=crossconnect.CrossConnectEventType" json:"type,omitempty"`
	CrossConnects        map[string]*CrossConnect `protobuf:"bytes,2,rep,name=cross_connects,json=crossConnects,proto3" json:"cross_connects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics              map[string]*Metrics      `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CrossConnectEvent) Reset()         { *m = CrossConnectEvent{} }
func (m *CrossConnectEvent) String() string { return proto.CompactTextString(m) }
func (*CrossConnectEvent) ProtoMessage()    {}
func (*CrossConnectEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_97acf85fcaabb3f6, []int{1}
}

func (m *CrossConnectEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossConnectEvent.Unmarshal(m, b)
}
func (m *CrossConnectEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossConnectEvent.Marshal(b, m, deterministic)
}
func (m *CrossConnectEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossConnectEvent.Merge(m, src)
}
func (m *CrossConnectEvent) XXX_Size() int {
	return xxx_messageInfo_CrossConnectEvent.Size(m)
}
func (m *CrossConnectEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossConnectEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CrossConnectEvent proto.InternalMessageInfo

func (m *CrossConnectEvent) GetType() CrossConnectEventType {
	if m != nil {
		return m.Type
	}
	return CrossConnectEventType_INITIAL_STATE_TRANSFER
}

func (m *CrossConnectEvent) GetCrossConnects() map[string]*CrossConnect {
	if m != nil {
		return m.CrossConnects
	}
	return nil
}

func (m *CrossConnectEvent) GetMetrics() map[string]*Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CrossConnect struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload              string                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Source               *connection.Connection `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Destination          *connection.Connection `protobuf:"bytes,7,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CrossConnect) Reset()         { *m = CrossConnect{} }
func (m *CrossConnect) String() string { return proto.CompactTextString(m) }
func (*CrossConnect) ProtoMessage()    {}
func (*CrossConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_97acf85fcaabb3f6, []int{2}
}

func (m *CrossConnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossConnect.Unmarshal(m, b)
}
func (m *CrossConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossConnect.Marshal(b, m, deterministic)
}
func (m *CrossConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossConnect.Merge(m, src)
}
func (m *CrossConnect) XXX_Size() int {
	return xxx_messageInfo_CrossConnect.Size(m)
}
func (m *CrossConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossConnect.DiscardUnknown(m)
}

var xxx_messageInfo_CrossConnect proto.InternalMessageInfo

func (m *CrossConnect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrossConnect) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *CrossConnect) GetSource() *connection.Connection {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CrossConnect) GetDestination() *connection.Connection {
	if m != nil {
		return m.Destination
	}
	return nil
}

func init() {
	proto.RegisterEnum("crossconnect.CrossConnectEventType", CrossConnectEventType_name, CrossConnectEventType_value)
	proto.RegisterType((*Metrics)(nil), "crossconnect.Metrics")
	proto.RegisterMapType((map[string]string)(nil), "crossconnect.Metrics.MetricsEntry")
	proto.RegisterType((*CrossConnectEvent)(nil), "crossconnect.CrossConnectEvent")
	proto.RegisterMapType((map[string]*CrossConnect)(nil), "crossconnect.CrossConnectEvent.CrossConnectsEntry")
	proto.RegisterMapType((map[string]*Metrics)(nil), "crossconnect.CrossConnectEvent.MetricsEntry")
	proto.RegisterType((*CrossConnect)(nil), "crossconnect.CrossConnect")
}

func init() { proto.RegisterFile("crossconnect.proto", fileDescriptor_97acf85fcaabb3f6) }

var fileDescriptor_97acf85fcaabb3f6 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x26, 0xe9, 0x68, 0xc5, 0x6b, 0xa9, 0x8a, 0xd9, 0xaa, 0x28, 0x17, 0xa6, 0x72, 0x99, 0x00,
	0xa5, 0x53, 0x38, 0x30, 0x4d, 0x5c, 0xaa, 0xce, 0x93, 0x2a, 0xb6, 0x89, 0x65, 0xe1, 0x80, 0x04,
	0xaa, 0x52, 0xd7, 0xb4, 0xd6, 0x52, 0x3b, 0xb2, 0xdd, 0xa2, 0x9c, 0xf9, 0x47, 0x10, 0x7f, 0x29,
	0xca, 0x8f, 0x82, 0xa3, 0x05, 0x72, 0x49, 0x9e, 0x3f, 0x7f, 0xef, 0xfb, 0xec, 0xf7, 0x9e, 0x01,
	0x11, 0x29, 0x94, 0x22, 0x82, 0x73, 0x4a, 0xb4, 0x97, 0x48, 0xa1, 0x05, 0xea, 0x99, 0x98, 0xfb,
	0x75, 0xc5, 0xf4, 0x7a, 0xbb, 0xf0, 0x88, 0xd8, 0x8c, 0x39, 0xd5, 0xdf, 0x85, 0xbc, 0x57, 0x54,
	0xee, 0x18, 0xa1, 0x1b, 0xaa, 0xd6, 0x75, 0x10, 0x11, 0x5c, 0x4b, 0x11, 0x27, 0x71, 0xc4, 0xe9,
	0x38, 0x4a, 0xd8, 0xb8, 0x94, 0x62, 0x82, 0x1b, 0x61, 0x61, 0xe6, 0x3a, 0x89, 0x4e, 0x13, 0xaa,
	0xc6, 0x74, 0x93, 0xe8, 0xb4, 0xf8, 0x16, 0x3b, 0xa3, 0x1f, 0x16, 0x74, 0xae, 0xa9, 0x96, 0x8c,
	0x28, 0xf4, 0x1e, 0x3a, 0x9b, 0x22, 0x74, 0xac, 0xe3, 0xd6, 0x49, 0xd7, 0x1f, 0x79, 0x95, 0x83,
	0x97, 0xbc, 0xfd, 0x1f, 0x73, 0x2d, 0xd3, 0x60, 0x9f, 0xe2, 0x9e, 0x43, 0xcf, 0xdc, 0x40, 0x03,
	0x68, 0xdd, 0xd3, 0xd4, 0xb1, 0x8e, 0xad, 0x93, 0x27, 0x41, 0x16, 0xa2, 0x43, 0x78, 0xbc, 0x8b,
	0xe2, 0x2d, 0x75, 0xec, 0x1c, 0x2b, 0x16, 0xe7, 0xf6, 0x99, 0x35, 0xfa, 0xd9, 0x82, 0x67, 0xd3,
	0xcc, 0x6a, 0x5a, 0x58, 0xe1, 0x1d, 0xe5, 0x1a, 0xbd, 0x83, 0x83, 0xec, 0xd8, 0xb9, 0x44, 0xdf,
	0x7f, 0x59, 0x3d, 0xcc, 0x03, 0x7a, 0x98, 0x26, 0x34, 0xc8, 0x13, 0xd0, 0x67, 0xe8, 0xe7, 0xdc,
	0x79, 0x49, 0x56, 0x8e, 0x9d, 0xdf, 0xc7, 0x6f, 0x90, 0xa8, 0x20, 0xe5, 0xfd, 0x9e, 0x12, 0x13,
	0x43, 0x97, 0x7f, 0x6b, 0xd4, 0xca, 0x35, 0xdf, 0x34, 0x69, 0xd6, 0x57, 0xeb, 0x0b, 0xa0, 0x87,
	0x66, 0x35, 0x35, 0x3b, 0x35, 0x6b, 0xd6, 0xf5, 0xdd, 0x7f, 0xbb, 0x19, 0xf5, 0x74, 0x6f, 0x1b,
	0x7b, 0xf1, 0xba, 0xaa, 0x7b, 0x54, 0xdb, 0x69, 0xb3, 0x45, 0xbf, 0x2c, 0xe8, 0x99, 0x76, 0xa8,
	0x0f, 0x36, 0x5b, 0x96, 0x92, 0x36, 0x5b, 0x22, 0x07, 0x3a, 0x49, 0x94, 0xc6, 0x22, 0x5a, 0x96,
	0xfd, 0xdd, 0x2f, 0x91, 0x07, 0x6d, 0x25, 0xb6, 0x92, 0x50, 0xe7, 0x20, 0x37, 0x1b, 0x7a, 0xc6,
	0x80, 0x4e, 0xff, 0x84, 0x41, 0xc9, 0x42, 0x67, 0xd0, 0x5d, 0x52, 0xa5, 0x19, 0x8f, 0x32, 0xd8,
	0xe9, 0xfc, 0x37, 0xc9, 0xa4, 0xbe, 0xfa, 0x00, 0x47, 0xb5, 0x73, 0x81, 0x5c, 0x18, 0xce, 0x6e,
	0x66, 0xe1, 0x6c, 0x72, 0x35, 0xbf, 0x0b, 0x27, 0x21, 0x9e, 0x87, 0xc1, 0xe4, 0xe6, 0xee, 0x12,
	0x07, 0x83, 0x47, 0x08, 0xa0, 0xfd, 0xe9, 0xe3, 0xc5, 0x24, 0xc4, 0x03, 0x2b, 0x8b, 0x2f, 0xf0,
	0x15, 0x0e, 0xf1, 0xc0, 0xf6, 0xd7, 0xf0, 0xfc, 0x5a, 0x70, 0xa6, 0x85, 0xac, 0xdc, 0xfb, 0x16,
	0x0e, 0x6b, 0x60, 0x85, 0x86, 0xde, 0x4a, 0x88, 0x55, 0x4c, 0x8b, 0x87, 0xb5, 0xd8, 0x7e, 0xf3,
	0x70, 0xf6, 0xce, 0xdc, 0x17, 0x0d, 0x03, 0x72, 0x6a, 0x2d, 0xda, 0x79, 0xca, 0xdb, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x80, 0x66, 0xae, 0xa0, 0x28, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorCrossConnectClient is the client API for MonitorCrossConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorCrossConnectClient interface {
	MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonitorCrossConnect_MonitorCrossConnectsClient, error)
}

type monitorCrossConnectClient struct {
	cc *grpc.ClientConn
}

func NewMonitorCrossConnectClient(cc *grpc.ClientConn) MonitorCrossConnectClient {
	return &monitorCrossConnectClient{cc}
}

func (c *monitorCrossConnectClient) MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonitorCrossConnect_MonitorCrossConnectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitorCrossConnect_serviceDesc.Streams[0], "/crossconnect.MonitorCrossConnect/MonitorCrossConnects", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorCrossConnectMonitorCrossConnectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitorCrossConnect_MonitorCrossConnectsClient interface {
	Recv() (*CrossConnectEvent, error)
	grpc.ClientStream
}

type monitorCrossConnectMonitorCrossConnectsClient struct {
	grpc.ClientStream
}

func (x *monitorCrossConnectMonitorCrossConnectsClient) Recv() (*CrossConnectEvent, error) {
	m := new(CrossConnectEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorCrossConnectServer is the server API for MonitorCrossConnect service.
type MonitorCrossConnectServer interface {
	MonitorCrossConnects(*empty.Empty, MonitorCrossConnect_MonitorCrossConnectsServer) error
}

// UnimplementedMonitorCrossConnectServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorCrossConnectServer struct {
}

func (*UnimplementedMonitorCrossConnectServer) MonitorCrossConnects(req *empty.Empty, srv MonitorCrossConnect_MonitorCrossConnectsServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorCrossConnects not implemented")
}

func RegisterMonitorCrossConnectServer(s *grpc.Server, srv MonitorCrossConnectServer) {
	s.RegisterService(&_MonitorCrossConnect_serviceDesc, srv)
}

func _MonitorCrossConnect_MonitorCrossConnects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorCrossConnectServer).MonitorCrossConnects(m, &monitorCrossConnectMonitorCrossConnectsServer{stream})
}

type MonitorCrossConnect_MonitorCrossConnectsServer interface {
	Send(*CrossConnectEvent) error
	grpc.ServerStream
}

type monitorCrossConnectMonitorCrossConnectsServer struct {
	grpc.ServerStream
}

func (x *monitorCrossConnectMonitorCrossConnectsServer) Send(m *CrossConnectEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitorCrossConnect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crossconnect.MonitorCrossConnect",
	HandlerType: (*MonitorCrossConnectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorCrossConnects",
			Handler:       _MonitorCrossConnect_MonitorCrossConnects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crossconnect.proto",
}

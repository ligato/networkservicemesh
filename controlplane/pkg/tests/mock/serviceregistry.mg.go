// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/networkservicemesh/networkservicemesh/controlplane/pkg/serviceregistry (interfaces: ServiceRegistry)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	networkservice "github.com/networkservicemesh/networkservicemesh/controlplane/api/networkservice"
	nsmdapi "github.com/networkservicemesh/networkservicemesh/controlplane/api/nsmdapi"
	registry "github.com/networkservicemesh/networkservicemesh/controlplane/api/registry"
	model "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/model"
	serviceregistry "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/serviceregistry"
	sid "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/sid"
	vni "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/vni"
	forwarder "github.com/networkservicemesh/networkservicemesh/forwarder/api/forwarder"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	time "time"
)

// MockServiceRegistry is a mock of ServiceRegistry interface
type MockServiceRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRegistryMockRecorder
}

// MockServiceRegistryMockRecorder is the mock recorder for MockServiceRegistry
type MockServiceRegistryMockRecorder struct {
	mock *MockServiceRegistry
}

// NewMockServiceRegistry creates a new mock instance
func NewMockServiceRegistry(ctrl *gomock.Controller) *MockServiceRegistry {
	mock := &MockServiceRegistry{ctrl: ctrl}
	mock.recorder = &MockServiceRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceRegistry) EXPECT() *MockServiceRegistryMockRecorder {
	return m.recorder
}

// DiscoveryClient mocks base method
func (m *MockServiceRegistry) DiscoveryClient(arg0 context.Context) (registry.NetworkServiceDiscoveryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryClient", arg0)
	ret0, _ := ret[0].(registry.NetworkServiceDiscoveryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoveryClient indicates an expected call of DiscoveryClient
func (mr *MockServiceRegistryMockRecorder) DiscoveryClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryClient", reflect.TypeOf((*MockServiceRegistry)(nil).DiscoveryClient), arg0)
}

// EndpointConnection mocks base method
func (m *MockServiceRegistry) EndpointConnection(arg0 context.Context, arg1 *model.Endpoint) (networkservice.NetworkServiceClient, *grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointConnection", arg0, arg1)
	ret0, _ := ret[0].(networkservice.NetworkServiceClient)
	ret1, _ := ret[1].(*grpc.ClientConn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EndpointConnection indicates an expected call of EndpointConnection
func (mr *MockServiceRegistryMockRecorder) EndpointConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointConnection", reflect.TypeOf((*MockServiceRegistry)(nil).EndpointConnection), arg0, arg1)
}

// ForwarderConnection mocks base method
func (m *MockServiceRegistry) ForwarderConnection(arg0 context.Context, arg1 *model.Forwarder) (forwarder.ForwarderClient, *grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwarderConnection", arg0, arg1)
	ret0, _ := ret[0].(forwarder.ForwarderClient)
	ret1, _ := ret[1].(*grpc.ClientConn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ForwarderConnection indicates an expected call of ForwarderConnection
func (mr *MockServiceRegistryMockRecorder) ForwarderConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwarderConnection", reflect.TypeOf((*MockServiceRegistry)(nil).ForwarderConnection), arg0, arg1)
}

// GetPublicAPI mocks base method
func (m *MockServiceRegistry) GetPublicAPI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicAPI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicAPI indicates an expected call of GetPublicAPI
func (mr *MockServiceRegistryMockRecorder) GetPublicAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicAPI", reflect.TypeOf((*MockServiceRegistry)(nil).GetPublicAPI))
}

// NSMDApiClient mocks base method
func (m *MockServiceRegistry) NSMDApiClient(arg0 context.Context) (nsmdapi.NSMDClient, *grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NSMDApiClient", arg0)
	ret0, _ := ret[0].(nsmdapi.NSMDClient)
	ret1, _ := ret[1].(*grpc.ClientConn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NSMDApiClient indicates an expected call of NSMDApiClient
func (mr *MockServiceRegistryMockRecorder) NSMDApiClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NSMDApiClient", reflect.TypeOf((*MockServiceRegistry)(nil).NSMDApiClient), arg0)
}

// NewWorkspaceProvider mocks base method
func (m *MockServiceRegistry) NewWorkspaceProvider() serviceregistry.WorkspaceLocationProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWorkspaceProvider")
	ret0, _ := ret[0].(serviceregistry.WorkspaceLocationProvider)
	return ret0
}

// NewWorkspaceProvider indicates an expected call of NewWorkspaceProvider
func (mr *MockServiceRegistryMockRecorder) NewWorkspaceProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWorkspaceProvider", reflect.TypeOf((*MockServiceRegistry)(nil).NewWorkspaceProvider))
}

// NseRegistryClient mocks base method
func (m *MockServiceRegistry) NseRegistryClient(arg0 context.Context) (registry.NetworkServiceRegistryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NseRegistryClient", arg0)
	ret0, _ := ret[0].(registry.NetworkServiceRegistryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NseRegistryClient indicates an expected call of NseRegistryClient
func (mr *MockServiceRegistryMockRecorder) NseRegistryClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NseRegistryClient", reflect.TypeOf((*MockServiceRegistry)(nil).NseRegistryClient), arg0)
}

// NsmRegistryClient mocks base method
func (m *MockServiceRegistry) NsmRegistryClient(arg0 context.Context) (registry.NsmRegistryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NsmRegistryClient", arg0)
	ret0, _ := ret[0].(registry.NsmRegistryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NsmRegistryClient indicates an expected call of NsmRegistryClient
func (mr *MockServiceRegistryMockRecorder) NsmRegistryClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NsmRegistryClient", reflect.TypeOf((*MockServiceRegistry)(nil).NsmRegistryClient), arg0)
}

// RemoteNetworkServiceClient mocks base method
func (m *MockServiceRegistry) RemoteNetworkServiceClient(arg0 context.Context, arg1 *registry.NetworkServiceManager) (networkservice.NetworkServiceClient, *grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteNetworkServiceClient", arg0, arg1)
	ret0, _ := ret[0].(networkservice.NetworkServiceClient)
	ret1, _ := ret[1].(*grpc.ClientConn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoteNetworkServiceClient indicates an expected call of RemoteNetworkServiceClient
func (mr *MockServiceRegistryMockRecorder) RemoteNetworkServiceClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteNetworkServiceClient", reflect.TypeOf((*MockServiceRegistry)(nil).RemoteNetworkServiceClient), arg0, arg1)
}

// SIDAllocator mocks base method
func (m *MockServiceRegistry) SIDAllocator() sid.Allocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIDAllocator")
	ret0, _ := ret[0].(sid.Allocator)
	return ret0
}

// SIDAllocator indicates an expected call of SIDAllocator
func (mr *MockServiceRegistryMockRecorder) SIDAllocator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIDAllocator", reflect.TypeOf((*MockServiceRegistry)(nil).SIDAllocator))
}

// Stop mocks base method
func (m *MockServiceRegistry) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockServiceRegistryMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServiceRegistry)(nil).Stop))
}

// VniAllocator mocks base method
func (m *MockServiceRegistry) VniAllocator() vni.VniAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VniAllocator")
	ret0, _ := ret[0].(vni.VniAllocator)
	return ret0
}

// VniAllocator indicates an expected call of VniAllocator
func (mr *MockServiceRegistryMockRecorder) VniAllocator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VniAllocator", reflect.TypeOf((*MockServiceRegistry)(nil).VniAllocator))
}

// WaitForForwarderAvailable mocks base method
func (m *MockServiceRegistry) WaitForForwarderAvailable(arg0 context.Context, arg1 model.Model, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForForwarderAvailable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForForwarderAvailable indicates an expected call of WaitForForwarderAvailable
func (mr *MockServiceRegistryMockRecorder) WaitForForwarderAvailable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForForwarderAvailable", reflect.TypeOf((*MockServiceRegistry)(nil).WaitForForwarderAvailable), arg0, arg1, arg2)
}

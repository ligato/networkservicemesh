// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/networkservicemesh/networkservicemesh/controlplane/api/networkservice (interfaces: NetworkServiceServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	connection "github.com/networkservicemesh/networkservicemesh/controlplane/api/connection"
	networkservice "github.com/networkservicemesh/networkservicemesh/controlplane/api/networkservice"
	reflect "reflect"
)

// MockNetworkServiceServer is a mock of NetworkServiceServer interface
type MockNetworkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceServerMockRecorder
}

// MockNetworkServiceServerMockRecorder is the mock recorder for MockNetworkServiceServer
type MockNetworkServiceServerMockRecorder struct {
	mock *MockNetworkServiceServer
}

// NewMockNetworkServiceServer creates a new mock instance
func NewMockNetworkServiceServer(ctrl *gomock.Controller) *MockNetworkServiceServer {
	mock := &MockNetworkServiceServer{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServiceServer) EXPECT() *MockNetworkServiceServerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNetworkServiceServer) Close(arg0 context.Context, arg1 *connection.Connection) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close
func (mr *MockNetworkServiceServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetworkServiceServer)(nil).Close), arg0, arg1)
}

// Request mocks base method
func (m *MockNetworkServiceServer) Request(arg0 context.Context, arg1 *networkservice.NetworkServiceRequest) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request
func (mr *MockNetworkServiceServerMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockNetworkServiceServer)(nil).Request), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/networkservicemesh/networkservicemesh/controlplane/pkg/api/nsm (interfaces: NetworkServiceEndpointManager,NetworkServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	connection "github.com/networkservicemesh/networkservicemesh/controlplane/api/connection"
	networkservice "github.com/networkservicemesh/networkservicemesh/controlplane/api/networkservice"
	registry "github.com/networkservicemesh/networkservicemesh/controlplane/api/registry"
	nsm "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/api/nsm"
	reflect "reflect"
)

// MockNetworkServiceEndpointManager is a mock of NetworkServiceEndpointManager interface
type MockNetworkServiceEndpointManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceEndpointManagerMockRecorder
}

// MockNetworkServiceEndpointManagerMockRecorder is the mock recorder for MockNetworkServiceEndpointManager
type MockNetworkServiceEndpointManagerMockRecorder struct {
	mock *MockNetworkServiceEndpointManager
}

// NewMockNetworkServiceEndpointManager creates a new mock instance
func NewMockNetworkServiceEndpointManager(ctrl *gomock.Controller) *MockNetworkServiceEndpointManager {
	mock := &MockNetworkServiceEndpointManager{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceEndpointManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServiceEndpointManager) EXPECT() *MockNetworkServiceEndpointManagerMockRecorder {
	return m.recorder
}

// CheckUpdateNSE mocks base method
func (m *MockNetworkServiceEndpointManager) CheckUpdateNSE(arg0 context.Context, arg1 *registry.NSERegistration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpdateNSE", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUpdateNSE indicates an expected call of CheckUpdateNSE
func (mr *MockNetworkServiceEndpointManagerMockRecorder) CheckUpdateNSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpdateNSE", reflect.TypeOf((*MockNetworkServiceEndpointManager)(nil).CheckUpdateNSE), arg0, arg1)
}

// CreateNSEClient mocks base method
func (m *MockNetworkServiceEndpointManager) CreateNSEClient(arg0 context.Context, arg1 *registry.NSERegistration) (nsm.NetworkServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNSEClient", arg0, arg1)
	ret0, _ := ret[0].(nsm.NetworkServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNSEClient indicates an expected call of CreateNSEClient
func (mr *MockNetworkServiceEndpointManagerMockRecorder) CreateNSEClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNSEClient", reflect.TypeOf((*MockNetworkServiceEndpointManager)(nil).CreateNSEClient), arg0, arg1)
}

// GetEndpoint mocks base method
func (m *MockNetworkServiceEndpointManager) GetEndpoint(arg0 context.Context, arg1 *connection.Connection, arg2 map[registry.EndpointNSMName]*registry.NSERegistration) (*registry.NSERegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint", arg0, arg1, arg2)
	ret0, _ := ret[0].(*registry.NSERegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoint indicates an expected call of GetEndpoint
func (mr *MockNetworkServiceEndpointManagerMockRecorder) GetEndpoint(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockNetworkServiceEndpointManager)(nil).GetEndpoint), arg0, arg1, arg2)
}

// IsLocalEndpoint mocks base method
func (m *MockNetworkServiceEndpointManager) IsLocalEndpoint(arg0 *registry.NSERegistration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocalEndpoint", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocalEndpoint indicates an expected call of IsLocalEndpoint
func (mr *MockNetworkServiceEndpointManagerMockRecorder) IsLocalEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocalEndpoint", reflect.TypeOf((*MockNetworkServiceEndpointManager)(nil).IsLocalEndpoint), arg0)
}

// MockNetworkServiceClient is a mock of NetworkServiceClient interface
type MockNetworkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceClientMockRecorder
}

// MockNetworkServiceClientMockRecorder is the mock recorder for MockNetworkServiceClient
type MockNetworkServiceClientMockRecorder struct {
	mock *MockNetworkServiceClient
}

// NewMockNetworkServiceClient creates a new mock instance
func NewMockNetworkServiceClient(ctrl *gomock.Controller) *MockNetworkServiceClient {
	mock := &MockNetworkServiceClient{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServiceClient) EXPECT() *MockNetworkServiceClientMockRecorder {
	return m.recorder
}

// Cleanup mocks base method
func (m *MockNetworkServiceClient) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockNetworkServiceClientMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockNetworkServiceClient)(nil).Cleanup))
}

// Close mocks base method
func (m *MockNetworkServiceClient) Close(arg0 context.Context, arg1 *connection.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNetworkServiceClientMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetworkServiceClient)(nil).Close), arg0, arg1)
}

// Request mocks base method
func (m *MockNetworkServiceClient) Request(arg0 context.Context, arg1 *networkservice.NetworkServiceRequest) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request
func (mr *MockNetworkServiceClientMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockNetworkServiceClient)(nil).Request), arg0, arg1)
}

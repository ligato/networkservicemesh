// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discovery_plugin.proto

package plugins

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	registry "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/apis/registry"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindNetworkServiceRequest struct {
	NetworkServiceName   string   `protobuf:"bytes,1,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindNetworkServiceRequest) Reset()         { *m = FindNetworkServiceRequest{} }
func (m *FindNetworkServiceRequest) String() string { return proto.CompactTextString(m) }
func (*FindNetworkServiceRequest) ProtoMessage()    {}
func (*FindNetworkServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58b3d9d83c4e8581, []int{0}
}

func (m *FindNetworkServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindNetworkServiceRequest.Unmarshal(m, b)
}
func (m *FindNetworkServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindNetworkServiceRequest.Marshal(b, m, deterministic)
}
func (m *FindNetworkServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindNetworkServiceRequest.Merge(m, src)
}
func (m *FindNetworkServiceRequest) XXX_Size() int {
	return xxx_messageInfo_FindNetworkServiceRequest.Size(m)
}
func (m *FindNetworkServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindNetworkServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindNetworkServiceRequest proto.InternalMessageInfo

func (m *FindNetworkServiceRequest) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

type FindNetworkServiceResponse struct {
	Found                   bool                                       `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Payload                 string                                     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	NetworkService          *registry.NetworkService                   `protobuf:"bytes,3,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	NetworkServiceManagers  map[string]*registry.NetworkServiceManager `protobuf:"bytes,4,rep,name=network_service_managers,json=networkServiceManagers,proto3" json:"network_service_managers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkServiceEndpoints []*registry.NetworkServiceEndpoint         `protobuf:"bytes,5,rep,name=network_service_endpoints,json=networkServiceEndpoints,proto3" json:"network_service_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                                   `json:"-"`
	XXX_unrecognized        []byte                                     `json:"-"`
	XXX_sizecache           int32                                      `json:"-"`
}

func (m *FindNetworkServiceResponse) Reset()         { *m = FindNetworkServiceResponse{} }
func (m *FindNetworkServiceResponse) String() string { return proto.CompactTextString(m) }
func (*FindNetworkServiceResponse) ProtoMessage()    {}
func (*FindNetworkServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58b3d9d83c4e8581, []int{1}
}

func (m *FindNetworkServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindNetworkServiceResponse.Unmarshal(m, b)
}
func (m *FindNetworkServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindNetworkServiceResponse.Marshal(b, m, deterministic)
}
func (m *FindNetworkServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindNetworkServiceResponse.Merge(m, src)
}
func (m *FindNetworkServiceResponse) XXX_Size() int {
	return xxx_messageInfo_FindNetworkServiceResponse.Size(m)
}
func (m *FindNetworkServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindNetworkServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindNetworkServiceResponse proto.InternalMessageInfo

func (m *FindNetworkServiceResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *FindNetworkServiceResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *FindNetworkServiceResponse) GetNetworkService() *registry.NetworkService {
	if m != nil {
		return m.NetworkService
	}
	return nil
}

func (m *FindNetworkServiceResponse) GetNetworkServiceManagers() map[string]*registry.NetworkServiceManager {
	if m != nil {
		return m.NetworkServiceManagers
	}
	return nil
}

func (m *FindNetworkServiceResponse) GetNetworkServiceEndpoints() []*registry.NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*FindNetworkServiceRequest)(nil), "plugins.FindNetworkServiceRequest")
	proto.RegisterType((*FindNetworkServiceResponse)(nil), "plugins.FindNetworkServiceResponse")
	proto.RegisterMapType((map[string]*registry.NetworkServiceManager)(nil), "plugins.FindNetworkServiceResponse.NetworkServiceManagersEntry")
}

func init() { proto.RegisterFile("discovery_plugin.proto", fileDescriptor_58b3d9d83c4e8581) }

var fileDescriptor_58b3d9d83c4e8581 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6f, 0xda, 0x30,
	0x14, 0xc6, 0x15, 0x32, 0xc6, 0x66, 0xa4, 0x31, 0x59, 0x88, 0x99, 0xec, 0xb0, 0x88, 0x5d, 0x38,
	0x25, 0x53, 0xa6, 0x49, 0x53, 0x2f, 0x55, 0xa5, 0xd2, 0x1b, 0xa8, 0x4a, 0xaf, 0x6d, 0x91, 0x49,
	0x5e, 0x83, 0x4b, 0x62, 0xbb, 0xb6, 0x43, 0x95, 0xff, 0xb3, 0x7f, 0x50, 0xd5, 0x24, 0x20, 0x91,
	0x06, 0xd4, 0x9b, 0x9f, 0xf3, 0xf2, 0xfd, 0xbe, 0xf7, 0xf9, 0xa1, 0x51, 0xcc, 0x74, 0x24, 0xb6,
	0xa0, 0x8a, 0xa5, 0x4c, 0xf3, 0x84, 0x71, 0x4f, 0x2a, 0x61, 0x04, 0xee, 0x55, 0x95, 0x76, 0xee,
	0x13, 0x66, 0xd6, 0xf9, 0xca, 0x8b, 0x44, 0xe6, 0x73, 0x30, 0xcf, 0x42, 0x6d, 0x34, 0xa8, 0x2d,
	0x8b, 0x20, 0x03, 0xbd, 0x6e, 0xbb, 0x8a, 0x04, 0x37, 0x4a, 0xa4, 0x32, 0xa5, 0x1c, 0x7c, 0xb9,
	0x49, 0x7c, 0x2a, 0x99, 0xf6, 0x15, 0x24, 0x4c, 0x1b, 0x55, 0xec, 0x0f, 0x15, 0x68, 0x32, 0x47,
	0xe3, 0x2b, 0xc6, 0xe3, 0x45, 0xa5, 0x73, 0x53, 0xe9, 0x84, 0xf0, 0x94, 0x83, 0x36, 0xf8, 0x0f,
	0x1a, 0xd6, 0x80, 0x65, 0x4d, 0x58, 0x72, 0x9a, 0x01, 0xb1, 0x5c, 0x6b, 0xfa, 0x35, 0xc4, 0xfc,
	0xe0, 0xa7, 0x05, 0xcd, 0x60, 0xf2, 0x62, 0x23, 0xa7, 0x4d, 0x4f, 0x4b, 0xc1, 0x35, 0xe0, 0x21,
	0xea, 0x3e, 0x88, 0x9c, 0xc7, 0xa5, 0xc2, 0x97, 0xb0, 0x2a, 0x30, 0x41, 0x3d, 0x49, 0x8b, 0x54,
	0xd0, 0x98, 0x74, 0x4a, 0xe5, 0x5d, 0x89, 0x2f, 0xd0, 0xa0, 0x61, 0x80, 0xd8, 0xae, 0x35, 0xed,
	0x07, 0xc4, 0xdb, 0xcf, 0xd1, 0x40, 0x7d, 0x3b, 0x74, 0x85, 0x0b, 0x44, 0x9a, 0x33, 0x64, 0x94,
	0xd3, 0x04, 0x94, 0x26, 0x9f, 0x5c, 0x7b, 0xda, 0x0f, 0xce, 0xbd, 0x3a, 0x6c, 0xef, 0xb8, 0xf3,
	0x06, 0x65, 0x5e, 0x2b, 0xcc, 0xb8, 0x51, 0x45, 0x38, 0xe2, 0xad, 0x1f, 0xf1, 0x2d, 0x1a, 0x37,
	0xd1, 0xc0, 0x63, 0x29, 0x18, 0x37, 0x9a, 0x74, 0x4b, 0xb6, 0x7b, 0x6c, 0x8e, 0x59, 0xdd, 0x18,
	0xfe, 0xe0, 0xad, 0xf7, 0xda, 0x79, 0x44, 0x3f, 0x4f, 0x98, 0xc2, 0xdf, 0x91, 0xbd, 0x81, 0xa2,
	0x7e, 0xaa, 0xb7, 0x23, 0xfe, 0x87, 0xba, 0x5b, 0x9a, 0xe6, 0x50, 0x86, 0xdc, 0x0f, 0x7e, 0x1d,
	0x43, 0xd7, 0x3a, 0x61, 0xd5, 0x7d, 0xd6, 0xf9, 0x6f, 0x05, 0x12, 0x0d, 0x2e, 0x77, 0x8b, 0x7a,
	0x5d, 0x86, 0x85, 0xef, 0x10, 0x7e, 0x1f, 0x17, 0x9e, 0x9c, 0xcc, 0xb2, 0xdc, 0x2a, 0xe7, 0xf7,
	0x07, 0xf2, 0x5e, 0x7d, 0x2e, 0xd7, 0xf3, 0xef, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xc6,
	0x7a, 0x8e, 0x21, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoveryPluginClient is the client API for DiscoveryPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryPluginClient interface {
	FindNetworkService(ctx context.Context, in *FindNetworkServiceRequest, opts ...grpc.CallOption) (*FindNetworkServiceResponse, error)
}

type discoveryPluginClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryPluginClient(cc *grpc.ClientConn) DiscoveryPluginClient {
	return &discoveryPluginClient{cc}
}

func (c *discoveryPluginClient) FindNetworkService(ctx context.Context, in *FindNetworkServiceRequest, opts ...grpc.CallOption) (*FindNetworkServiceResponse, error) {
	out := new(FindNetworkServiceResponse)
	err := c.cc.Invoke(ctx, "/plugins.DiscoveryPlugin/FindNetworkService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryPluginServer is the server API for DiscoveryPlugin service.
type DiscoveryPluginServer interface {
	FindNetworkService(context.Context, *FindNetworkServiceRequest) (*FindNetworkServiceResponse, error)
}

// UnimplementedDiscoveryPluginServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryPluginServer struct {
}

func (*UnimplementedDiscoveryPluginServer) FindNetworkService(ctx context.Context, req *FindNetworkServiceRequest) (*FindNetworkServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNetworkService not implemented")
}

func RegisterDiscoveryPluginServer(s *grpc.Server, srv DiscoveryPluginServer) {
	s.RegisterService(&_DiscoveryPlugin_serviceDesc, srv)
}

func _DiscoveryPlugin_FindNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryPluginServer).FindNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.DiscoveryPlugin/FindNetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryPluginServer).FindNetworkService(ctx, req.(*FindNetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscoveryPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.DiscoveryPlugin",
	HandlerType: (*DiscoveryPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNetworkService",
			Handler:    _DiscoveryPlugin_FindNetworkService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery_plugin.proto",
}

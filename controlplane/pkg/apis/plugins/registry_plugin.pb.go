// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry_plugin.proto

package plugins

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	registry "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/apis/registry"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NSEList struct {
	NetworkServiceEndpoints []*registry.NetworkServiceEndpoint `protobuf:"bytes,1,rep,name=network_service_endpoints,json=networkServiceEndpoints,proto3" json:"network_service_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                           `json:"-"`
	XXX_unrecognized        []byte                             `json:"-"`
	XXX_sizecache           int32                              `json:"-"`
}

func (m *NSEList) Reset()         { *m = NSEList{} }
func (m *NSEList) String() string { return proto.CompactTextString(m) }
func (*NSEList) ProtoMessage()    {}
func (*NSEList) Descriptor() ([]byte, []int) {
	return fileDescriptor_06aa71a32b77612a, []int{0}
}

func (m *NSEList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NSEList.Unmarshal(m, b)
}
func (m *NSEList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NSEList.Marshal(b, m, deterministic)
}
func (m *NSEList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSEList.Merge(m, src)
}
func (m *NSEList) XXX_Size() int {
	return xxx_messageInfo_NSEList.Size(m)
}
func (m *NSEList) XXX_DiscardUnknown() {
	xxx_messageInfo_NSEList.DiscardUnknown(m)
}

var xxx_messageInfo_NSEList proto.InternalMessageInfo

func (m *NSEList) GetNetworkServiceEndpoints() []*registry.NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*NSEList)(nil), "plugins.NSEList")
}

func init() { proto.RegisterFile("registry_plugin.proto", fileDescriptor_06aa71a32b77612a) }

var fileDescriptor_06aa71a32b77612a = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x51, 0xc1, 0x61, 0x06, 0x22, 0x01, 0x75, 0xcb, 0xc5, 0xe1, 0xc9, 0x53, 0x0a, 0xdb,
	0x07, 0xf0, 0x20, 0xc1, 0x8b, 0xab, 0xd2, 0x5e, 0xc5, 0xd1, 0xd5, 0xbf, 0x59, 0x58, 0x9b, 0xc4,
	0xe4, 0xdf, 0x49, 0xbf, 0x8b, 0x1f, 0x56, 0xb6, 0xc4, 0xba, 0xc3, 0x8a, 0x97, 0x90, 0xbc, 0xff,
	0x2f, 0xef, 0x91, 0x17, 0x72, 0xe9, 0x40, 0x2a, 0x8f, 0xae, 0x5d, 0xd8, 0xaa, 0x91, 0x4a, 0x73,
	0xeb, 0x0c, 0x1a, 0x3a, 0x08, 0x27, 0xcf, 0xde, 0xa4, 0xc2, 0x55, 0xb3, 0xe4, 0xa5, 0xa9, 0x13,
	0x0d, 0xf8, 0x65, 0xdc, 0xda, 0x83, 0xdb, 0xa8, 0x12, 0x6a, 0xf0, 0xab, 0x43, 0x52, 0x69, 0x34,
	0x3a, 0x53, 0xd9, 0xaa, 0xd0, 0x90, 0xd8, 0xb5, 0x4c, 0x0a, 0xab, 0x7c, 0xf2, 0x1b, 0xd3, 0x6d,
	0x42, 0x10, 0x1b, 0x59, 0x6c, 0x2d, 0xf8, 0x04, 0x6a, 0x8b, 0x6d, 0x58, 0xc3, 0xe4, 0x56, 0x92,
	0x41, 0x9a, 0x8b, 0x27, 0xe5, 0x91, 0xbe, 0x92, 0x71, 0x0c, 0x5a, 0xc4, 0xa4, 0x05, 0xe8, 0x77,
	0x6b, 0x94, 0x46, 0x3f, 0x3a, 0x9a, 0x9c, 0xdc, 0x0d, 0xa7, 0x13, 0xde, 0x19, 0xa7, 0x01, 0xcd,
	0x03, 0x29, 0x22, 0x98, 0x5d, 0xeb, 0x83, 0xba, 0x9f, 0x7e, 0x1f, 0x93, 0xf3, 0x2c, 0x5e, 0x7e,
	0xd9, 0x3d, 0x9b, 0x3e, 0x93, 0x61, 0x50, 0xc0, 0xa5, 0xf9, 0x9c, 0xde, 0xf4, 0x99, 0xcf, 0x0b,
	0x5d, 0x48, 0x70, 0xec, 0x3f, 0x80, 0x3e, 0xec, 0x1b, 0x0a, 0x3a, 0xde, 0xe3, 0x73, 0x11, 0xc3,
	0x0b, 0x54, 0x46, 0xb3, 0xfe, 0x11, 0xbd, 0x27, 0x67, 0x19, 0xd4, 0x66, 0x03, 0x5b, 0x0b, 0xf6,
	0xc7, 0x75, 0x62, 0x06, 0x9f, 0x0d, 0x78, 0x64, 0x57, 0x5c, 0x1a, 0x23, 0x2b, 0x08, 0x4d, 0x2e,
	0x9b, 0x0f, 0x2e, 0xb6, 0xc5, 0xd2, 0x19, 0x19, 0x3c, 0x02, 0xa6, 0xb9, 0xf0, 0xb4, 0x07, 0x61,
	0x17, 0x3c, 0xfe, 0x3c, 0x8f, 0xe5, 0x2f, 0x4f, 0x77, 0xc4, 0xec, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0x0b, 0xcb, 0x1e, 0x2a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryPluginClient is the client API for RegistryPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryPluginClient interface {
	RegisterNSM(ctx context.Context, in *registry.NetworkServiceManager, opts ...grpc.CallOption) (*registry.NetworkServiceManager, error)
	RegisterNSE(ctx context.Context, in *registry.NSERegistration, opts ...grpc.CallOption) (*registry.NSERegistration, error)
	RemoveNSE(ctx context.Context, in *registry.RemoveNSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNSEs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NSEList, error)
}

type registryPluginClient struct {
	cc *grpc.ClientConn
}

func NewRegistryPluginClient(cc *grpc.ClientConn) RegistryPluginClient {
	return &registryPluginClient{cc}
}

func (c *registryPluginClient) RegisterNSM(ctx context.Context, in *registry.NetworkServiceManager, opts ...grpc.CallOption) (*registry.NetworkServiceManager, error) {
	out := new(registry.NetworkServiceManager)
	err := c.cc.Invoke(ctx, "/plugins.RegistryPlugin/RegisterNSM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryPluginClient) RegisterNSE(ctx context.Context, in *registry.NSERegistration, opts ...grpc.CallOption) (*registry.NSERegistration, error) {
	out := new(registry.NSERegistration)
	err := c.cc.Invoke(ctx, "/plugins.RegistryPlugin/RegisterNSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryPluginClient) RemoveNSE(ctx context.Context, in *registry.RemoveNSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plugins.RegistryPlugin/RemoveNSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryPluginClient) GetNSEs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NSEList, error) {
	out := new(NSEList)
	err := c.cc.Invoke(ctx, "/plugins.RegistryPlugin/GetNSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryPluginServer is the server API for RegistryPlugin service.
type RegistryPluginServer interface {
	RegisterNSM(context.Context, *registry.NetworkServiceManager) (*registry.NetworkServiceManager, error)
	RegisterNSE(context.Context, *registry.NSERegistration) (*registry.NSERegistration, error)
	RemoveNSE(context.Context, *registry.RemoveNSERequest) (*empty.Empty, error)
	GetNSEs(context.Context, *empty.Empty) (*NSEList, error)
}

// UnimplementedRegistryPluginServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryPluginServer struct {
}

func (*UnimplementedRegistryPluginServer) RegisterNSM(ctx context.Context, req *registry.NetworkServiceManager) (*registry.NetworkServiceManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNSM not implemented")
}
func (*UnimplementedRegistryPluginServer) RegisterNSE(ctx context.Context, req *registry.NSERegistration) (*registry.NSERegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNSE not implemented")
}
func (*UnimplementedRegistryPluginServer) RemoveNSE(ctx context.Context, req *registry.RemoveNSERequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNSE not implemented")
}
func (*UnimplementedRegistryPluginServer) GetNSEs(ctx context.Context, req *empty.Empty) (*NSEList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNSEs not implemented")
}

func RegisterRegistryPluginServer(s *grpc.Server, srv RegistryPluginServer) {
	s.RegisterService(&_RegistryPlugin_serviceDesc, srv)
}

func _RegistryPlugin_RegisterNSM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.NetworkServiceManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryPluginServer).RegisterNSM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.RegistryPlugin/RegisterNSM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryPluginServer).RegisterNSM(ctx, req.(*registry.NetworkServiceManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryPlugin_RegisterNSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.NSERegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryPluginServer).RegisterNSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.RegistryPlugin/RegisterNSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryPluginServer).RegisterNSE(ctx, req.(*registry.NSERegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryPlugin_RemoveNSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.RemoveNSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryPluginServer).RemoveNSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.RegistryPlugin/RemoveNSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryPluginServer).RemoveNSE(ctx, req.(*registry.RemoveNSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryPlugin_GetNSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryPluginServer).GetNSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.RegistryPlugin/GetNSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryPluginServer).GetNSEs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.RegistryPlugin",
	HandlerType: (*RegistryPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNSM",
			Handler:    _RegistryPlugin_RegisterNSM_Handler,
		},
		{
			MethodName: "RegisterNSE",
			Handler:    _RegistryPlugin_RegisterNSE_Handler,
		},
		{
			MethodName: "RemoveNSE",
			Handler:    _RegistryPlugin_RemoveNSE_Handler,
		},
		{
			MethodName: "GetNSEs",
			Handler:    _RegistryPlugin_GetNSEs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry_plugin.proto",
}

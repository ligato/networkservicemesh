// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package plugins

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PluginCapability int32

const (
	PluginCapability_REQUEST    PluginCapability = 0
	PluginCapability_CONNECTION PluginCapability = 1
)

var PluginCapability_name = map[int32]string{
	0: "REQUEST",
	1: "CONNECTION",
}

var PluginCapability_value = map[string]int32{
	"REQUEST":    0,
	"CONNECTION": 1,
}

func (x PluginCapability) String() string {
	return proto.EnumName(PluginCapability_name, int32(x))
}

func (PluginCapability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

type PluginInfo struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Endpoint             string             `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Capabilities         []PluginCapability `protobuf:"varint,3,rep,packed,name=capabilities,proto3,enum=plugins.PluginCapability" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PluginInfo) Reset()         { *m = PluginInfo{} }
func (m *PluginInfo) String() string { return proto.CompactTextString(m) }
func (*PluginInfo) ProtoMessage()    {}
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

func (m *PluginInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginInfo.Unmarshal(m, b)
}
func (m *PluginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginInfo.Marshal(b, m, deterministic)
}
func (m *PluginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginInfo.Merge(m, src)
}
func (m *PluginInfo) XXX_Size() int {
	return xxx_messageInfo_PluginInfo.Size(m)
}
func (m *PluginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PluginInfo proto.InternalMessageInfo

func (m *PluginInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginInfo) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PluginInfo) GetCapabilities() []PluginCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func init() {
	proto.RegisterEnum("plugins.PluginCapability", PluginCapability_name, PluginCapability_value)
	proto.RegisterType((*PluginInfo)(nil), "plugins.PluginInfo")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x8d, 0x13, 0x37, 0x9f, 0x52, 0xc7, 0x13, 0xa4, 0xf6, 0x34, 0x3c, 0x15, 0x0f, 0x99,
	0xcc, 0x83, 0x27, 0x4f, 0x25, 0x87, 0x81, 0x74, 0x1a, 0xe7, 0x07, 0x68, 0xf5, 0xad, 0x04, 0xba,
	0x24, 0x36, 0xa9, 0x50, 0xfc, 0x12, 0x7e, 0x64, 0x59, 0x33, 0x05, 0x07, 0xbb, 0x84, 0x97, 0xc7,
	0xef, 0xfd, 0xff, 0xfc, 0x20, 0x6a, 0xa8, 0x52, 0xce, 0x37, 0x1d, 0xb7, 0x8d, 0xf1, 0x06, 0x87,
	0xb6, 0x6e, 0x2b, 0xa5, 0x5d, 0x12, 0x5b, 0xdf, 0x59, 0x72, 0x53, 0x5a, 0x5b, 0xdf, 0x85, 0x37,
	0x20, 0xd7, 0x5f, 0x00, 0x4f, 0x3d, 0x34, 0xd7, 0x2b, 0x83, 0x08, 0x47, 0xba, 0x58, 0x53, 0xcc,
	0x26, 0x2c, 0x3d, 0x91, 0xfd, 0x8c, 0x09, 0x8c, 0x48, 0xbf, 0x5b, 0xa3, 0xb4, 0x8f, 0x0f, 0xfb,
	0xfd, 0xdf, 0x1f, 0x1f, 0xe0, 0xec, 0xad, 0xb0, 0x45, 0xa9, 0x6a, 0xe5, 0x15, 0xb9, 0x78, 0x30,
	0x19, 0xa4, 0xd1, 0xec, 0x8a, 0x6f, 0x7b, 0x79, 0x88, 0xce, 0x7e, 0x91, 0x4e, 0xfe, 0xc3, 0x6f,
	0xa6, 0x30, 0xde, 0x25, 0xf0, 0x14, 0x86, 0x52, 0x3c, 0xbf, 0x8a, 0x97, 0xe5, 0xf8, 0x00, 0x23,
	0x80, 0x6c, 0x91, 0xe7, 0x22, 0x5b, 0xce, 0x17, 0xf9, 0x98, 0xcd, 0xbe, 0x19, 0x44, 0xe1, 0x42,
	0x6e, 0x4d, 0xf1, 0x1e, 0x46, 0x61, 0xa6, 0x06, 0x2f, 0x76, 0x8a, 0x37, 0x4e, 0xc9, 0x25, 0xaf,
	0x8c, 0xa9, 0x6a, 0x0a, 0xc2, 0x65, 0xbb, 0xe2, 0x62, 0xe3, 0x8f, 0x02, 0xce, 0x25, 0x7d, 0xb4,
	0xe4, 0xfc, 0xa3, 0xfa, 0x24, 0x4d, 0xce, 0xe1, 0x1e, 0x74, 0x5f, 0x44, 0xca, 0x6e, 0x59, 0x79,
	0xdc, 0xef, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xc4, 0x11, 0xee, 0x7c, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginRegistryClient is the client API for PluginRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginRegistryClient interface {
	Register(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	RequestLiveness(ctx context.Context, opts ...grpc.CallOption) (PluginRegistry_RequestLivenessClient, error)
}

type pluginRegistryClient struct {
	cc *grpc.ClientConn
}

func NewPluginRegistryClient(cc *grpc.ClientConn) PluginRegistryClient {
	return &pluginRegistryClient{cc}
}

func (c *pluginRegistryClient) Register(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plugins.PluginRegistry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryClient) RequestLiveness(ctx context.Context, opts ...grpc.CallOption) (PluginRegistry_RequestLivenessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PluginRegistry_serviceDesc.Streams[0], "/plugins.PluginRegistry/RequestLiveness", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginRegistryRequestLivenessClient{stream}
	return x, nil
}

type PluginRegistry_RequestLivenessClient interface {
	Send(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type pluginRegistryRequestLivenessClient struct {
	grpc.ClientStream
}

func (x *pluginRegistryRequestLivenessClient) Send(m *empty.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pluginRegistryRequestLivenessClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginRegistryServer is the server API for PluginRegistry service.
type PluginRegistryServer interface {
	Register(context.Context, *PluginInfo) (*empty.Empty, error)
	RequestLiveness(PluginRegistry_RequestLivenessServer) error
}

// UnimplementedPluginRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedPluginRegistryServer struct {
}

func (*UnimplementedPluginRegistryServer) Register(ctx context.Context, req *PluginInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedPluginRegistryServer) RequestLiveness(srv PluginRegistry_RequestLivenessServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestLiveness not implemented")
}

func RegisterPluginRegistryServer(s *grpc.Server, srv PluginRegistryServer) {
	s.RegisterService(&_PluginRegistry_serviceDesc, srv)
}

func _PluginRegistry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginRegistry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServer).Register(ctx, req.(*PluginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistry_RequestLiveness_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginRegistryServer).RequestLiveness(&pluginRegistryRequestLivenessServer{stream})
}

type PluginRegistry_RequestLivenessServer interface {
	Send(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ServerStream
}

type pluginRegistryRequestLivenessServer struct {
	grpc.ServerStream
}

func (x *pluginRegistryRequestLivenessServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pluginRegistryRequestLivenessServer) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PluginRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.PluginRegistry",
	HandlerType: (*PluginRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PluginRegistry_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestLiveness",
			Handler:       _PluginRegistry_RequestLiveness_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registry.proto",
}

syntax = "proto3";

package networkservice;

import "github.com/ligato/networkservicemesh/pkg/nsm/apis/common/common.proto";

message NetworkServiceRequest {
    Connection connection = 1;
    repeated common.LocalMechanism local_mechanism_preference = 2;
}

message Connection {
    string connection_id = 1;
    string network_service = 2;
    common.LocalMechanism local_mechanism = 3;
    ConnectionContext connection_context = 4;
    map<string,string> labels = 5;
}

//  ConnectionContext - end to end context for the connection between an NSC and NSE
//  Motivation:
//        Many things like addressing, routing, etc are generally best decided by
//        the NSE.  
//        The NSC however has the best picture of what it needs.
//        Does it need ipv4 addressing on the connection endpoints?
//        Does it need a set of IPv6 prefixes valid in the context of that connection
//        it can use for downstream clients?
//        Are there prefixes that cannot be used in the context of the connection
//        because they are used elsewhere?
message ConnectionContext {
    //   context - a key value map of context information it can be used to communicate
    //             the NSC's needs (partially specified) or the NSEs decisions (fully specified)
    //   Known keys - all of these keys are optional
    //   context[requires] - comma separated list of keys the NSC needs to get back in the context from the NSE
    //                       Example: requires=src_ip,dst_ip, ip_routes
    //   context[src_ip] - ip addresses of the source end of the connection
    //                         Example src_ip=1.1.1.1/30
    //                         Typically provided by NSE, but may be proposed by NSC
    //   context[dst_ip] - ip addresses of destination end of the connection, typically provided by NSE, but may be proposed by NSC
    //   context[src_mac] - mac address of source end of the connection, typically provided by NSE, but may be proposed by NSC
    //   context[dst_mac] - mac address of source end of the connection
    //   context[exclude_prefixes] - comma seperated list of ip prefixes, specified by NSC that cannot be used in response by NSE
    //   context[ip_routes] - comma seperated list of ip prefixes to be routed to the connection, typically specified by NSE
    //   Note: This list will expand and evolve
    map<string,string> connection_context = 1;
}

service NetworkService {
    rpc Request(NetworkServiceRequest) returns (Connection);
    rpc Close(Connection) returns (Connection);
    rpc Monitor(Connection) returns (stream Connection);
    rpc MonitorConnections(common.Empty) returns (stream Connection);
}
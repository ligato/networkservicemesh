// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crossconnect.proto

package crossconnect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import connection "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/apis/local/connection"
import connection1 "github.com/networkservicemesh/networkservicemesh/controlplane/pkg/apis/remote/connection"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CrossConnectEventType int32

const (
	CrossConnectEventType_INITIAL_STATE_TRANSFER CrossConnectEventType = 0
	CrossConnectEventType_UPDATE                 CrossConnectEventType = 1
	CrossConnectEventType_DELETE                 CrossConnectEventType = 2
)

var CrossConnectEventType_name = map[int32]string{
	0: "INITIAL_STATE_TRANSFER",
	1: "UPDATE",
	2: "DELETE",
}
var CrossConnectEventType_value = map[string]int32{
	"INITIAL_STATE_TRANSFER": 0,
	"UPDATE":                 1,
	"DELETE":                 2,
}

func (x CrossConnectEventType) String() string {
	return proto.EnumName(CrossConnectEventType_name, int32(x))
}
func (CrossConnectEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_crossconnect_1e34ad52957571e6, []int{0}
}

type CrossConnectEvent struct {
	Type                 CrossConnectEventType    `protobuf:"varint,1,opt,name=type,proto3,enum=crossconnect.CrossConnectEventType" json:"type,omitempty"`
	CrossConnects        map[string]*CrossConnect `protobuf:"bytes,2,rep,name=cross_connects,json=crossConnects,proto3" json:"cross_connects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CrossConnectEvent) Reset()         { *m = CrossConnectEvent{} }
func (m *CrossConnectEvent) String() string { return proto.CompactTextString(m) }
func (*CrossConnectEvent) ProtoMessage()    {}
func (*CrossConnectEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_crossconnect_1e34ad52957571e6, []int{0}
}
func (m *CrossConnectEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossConnectEvent.Unmarshal(m, b)
}
func (m *CrossConnectEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossConnectEvent.Marshal(b, m, deterministic)
}
func (dst *CrossConnectEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossConnectEvent.Merge(dst, src)
}
func (m *CrossConnectEvent) XXX_Size() int {
	return xxx_messageInfo_CrossConnectEvent.Size(m)
}
func (m *CrossConnectEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossConnectEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CrossConnectEvent proto.InternalMessageInfo

func (m *CrossConnectEvent) GetType() CrossConnectEventType {
	if m != nil {
		return m.Type
	}
	return CrossConnectEventType_INITIAL_STATE_TRANSFER
}

func (m *CrossConnectEvent) GetCrossConnects() map[string]*CrossConnect {
	if m != nil {
		return m.CrossConnects
	}
	return nil
}

type CrossConnect struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*CrossConnect_LocalSource
	//	*CrossConnect_RemoteSource
	Source isCrossConnect_Source `protobuf_oneof:"source"`
	// Types that are valid to be assigned to Destination:
	//	*CrossConnect_LocalDestination
	//	*CrossConnect_RemoteDestination
	Destination          isCrossConnect_Destination `protobuf_oneof:"destination"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CrossConnect) Reset()         { *m = CrossConnect{} }
func (m *CrossConnect) String() string { return proto.CompactTextString(m) }
func (*CrossConnect) ProtoMessage()    {}
func (*CrossConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_crossconnect_1e34ad52957571e6, []int{1}
}
func (m *CrossConnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossConnect.Unmarshal(m, b)
}
func (m *CrossConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossConnect.Marshal(b, m, deterministic)
}
func (dst *CrossConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossConnect.Merge(dst, src)
}
func (m *CrossConnect) XXX_Size() int {
	return xxx_messageInfo_CrossConnect.Size(m)
}
func (m *CrossConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossConnect.DiscardUnknown(m)
}

var xxx_messageInfo_CrossConnect proto.InternalMessageInfo

func (m *CrossConnect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrossConnect) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type isCrossConnect_Source interface {
	isCrossConnect_Source()
}

type CrossConnect_LocalSource struct {
	LocalSource *connection.Connection `protobuf:"bytes,4,opt,name=local_source,json=localSource,proto3,oneof"`
}

type CrossConnect_RemoteSource struct {
	RemoteSource *connection1.Connection `protobuf:"bytes,5,opt,name=remote_source,json=remoteSource,proto3,oneof"`
}

func (*CrossConnect_LocalSource) isCrossConnect_Source() {}

func (*CrossConnect_RemoteSource) isCrossConnect_Source() {}

func (m *CrossConnect) GetSource() isCrossConnect_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CrossConnect) GetLocalSource() *connection.Connection {
	if x, ok := m.GetSource().(*CrossConnect_LocalSource); ok {
		return x.LocalSource
	}
	return nil
}

func (m *CrossConnect) GetRemoteSource() *connection1.Connection {
	if x, ok := m.GetSource().(*CrossConnect_RemoteSource); ok {
		return x.RemoteSource
	}
	return nil
}

type isCrossConnect_Destination interface {
	isCrossConnect_Destination()
}

type CrossConnect_LocalDestination struct {
	LocalDestination *connection.Connection `protobuf:"bytes,6,opt,name=local_destination,json=localDestination,proto3,oneof"`
}

type CrossConnect_RemoteDestination struct {
	RemoteDestination *connection1.Connection `protobuf:"bytes,7,opt,name=remote_destination,json=remoteDestination,proto3,oneof"`
}

func (*CrossConnect_LocalDestination) isCrossConnect_Destination() {}

func (*CrossConnect_RemoteDestination) isCrossConnect_Destination() {}

func (m *CrossConnect) GetDestination() isCrossConnect_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *CrossConnect) GetLocalDestination() *connection.Connection {
	if x, ok := m.GetDestination().(*CrossConnect_LocalDestination); ok {
		return x.LocalDestination
	}
	return nil
}

func (m *CrossConnect) GetRemoteDestination() *connection1.Connection {
	if x, ok := m.GetDestination().(*CrossConnect_RemoteDestination); ok {
		return x.RemoteDestination
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CrossConnect) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CrossConnect_OneofMarshaler, _CrossConnect_OneofUnmarshaler, _CrossConnect_OneofSizer, []interface{}{
		(*CrossConnect_LocalSource)(nil),
		(*CrossConnect_RemoteSource)(nil),
		(*CrossConnect_LocalDestination)(nil),
		(*CrossConnect_RemoteDestination)(nil),
	}
}

func _CrossConnect_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CrossConnect)
	// source
	switch x := m.Source.(type) {
	case *CrossConnect_LocalSource:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalSource); err != nil {
			return err
		}
	case *CrossConnect_RemoteSource:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrossConnect.Source has unexpected type %T", x)
	}
	// destination
	switch x := m.Destination.(type) {
	case *CrossConnect_LocalDestination:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalDestination); err != nil {
			return err
		}
	case *CrossConnect_RemoteDestination:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteDestination); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrossConnect.Destination has unexpected type %T", x)
	}
	return nil
}

func _CrossConnect_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CrossConnect)
	switch tag {
	case 4: // source.local_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection.Connection)
		err := b.DecodeMessage(msg)
		m.Source = &CrossConnect_LocalSource{msg}
		return true, err
	case 5: // source.remote_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection1.Connection)
		err := b.DecodeMessage(msg)
		m.Source = &CrossConnect_RemoteSource{msg}
		return true, err
	case 6: // destination.local_destination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection.Connection)
		err := b.DecodeMessage(msg)
		m.Destination = &CrossConnect_LocalDestination{msg}
		return true, err
	case 7: // destination.remote_destination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection1.Connection)
		err := b.DecodeMessage(msg)
		m.Destination = &CrossConnect_RemoteDestination{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CrossConnect_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CrossConnect)
	// source
	switch x := m.Source.(type) {
	case *CrossConnect_LocalSource:
		s := proto.Size(x.LocalSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrossConnect_RemoteSource:
		s := proto.Size(x.RemoteSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// destination
	switch x := m.Destination.(type) {
	case *CrossConnect_LocalDestination:
		s := proto.Size(x.LocalDestination)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrossConnect_RemoteDestination:
		s := proto.Size(x.RemoteDestination)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CrossConnectEvent)(nil), "crossconnect.CrossConnectEvent")
	proto.RegisterMapType((map[string]*CrossConnect)(nil), "crossconnect.CrossConnectEvent.CrossConnectsEntry")
	proto.RegisterType((*CrossConnect)(nil), "crossconnect.CrossConnect")
	proto.RegisterEnum("crossconnect.CrossConnectEventType", CrossConnectEventType_name, CrossConnectEventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorCrossConnectClient is the client API for MonitorCrossConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorCrossConnectClient interface {
	MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonitorCrossConnect_MonitorCrossConnectsClient, error)
}

type monitorCrossConnectClient struct {
	cc *grpc.ClientConn
}

func NewMonitorCrossConnectClient(cc *grpc.ClientConn) MonitorCrossConnectClient {
	return &monitorCrossConnectClient{cc}
}

func (c *monitorCrossConnectClient) MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonitorCrossConnect_MonitorCrossConnectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitorCrossConnect_serviceDesc.Streams[0], "/crossconnect.MonitorCrossConnect/MonitorCrossConnects", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorCrossConnectMonitorCrossConnectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitorCrossConnect_MonitorCrossConnectsClient interface {
	Recv() (*CrossConnectEvent, error)
	grpc.ClientStream
}

type monitorCrossConnectMonitorCrossConnectsClient struct {
	grpc.ClientStream
}

func (x *monitorCrossConnectMonitorCrossConnectsClient) Recv() (*CrossConnectEvent, error) {
	m := new(CrossConnectEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorCrossConnectServer is the server API for MonitorCrossConnect service.
type MonitorCrossConnectServer interface {
	MonitorCrossConnects(*empty.Empty, MonitorCrossConnect_MonitorCrossConnectsServer) error
}

func RegisterMonitorCrossConnectServer(s *grpc.Server, srv MonitorCrossConnectServer) {
	s.RegisterService(&_MonitorCrossConnect_serviceDesc, srv)
}

func _MonitorCrossConnect_MonitorCrossConnects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorCrossConnectServer).MonitorCrossConnects(m, &monitorCrossConnectMonitorCrossConnectsServer{stream})
}

type MonitorCrossConnect_MonitorCrossConnectsServer interface {
	Send(*CrossConnectEvent) error
	grpc.ServerStream
}

type monitorCrossConnectMonitorCrossConnectsServer struct {
	grpc.ServerStream
}

func (x *monitorCrossConnectMonitorCrossConnectsServer) Send(m *CrossConnectEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitorCrossConnect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crossconnect.MonitorCrossConnect",
	HandlerType: (*MonitorCrossConnectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorCrossConnects",
			Handler:       _MonitorCrossConnect_MonitorCrossConnects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crossconnect.proto",
}

func init() { proto.RegisterFile("crossconnect.proto", fileDescriptor_crossconnect_1e34ad52957571e6) }

var fileDescriptor_crossconnect_1e34ad52957571e6 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6b, 0xb7, 0x4d, 0xe9, 0xe4, 0x8f, 0x9c, 0x05, 0x2a, 0xcb, 0x02, 0x11, 0x95, 0x4b,
	0xc4, 0xc1, 0xae, 0xdc, 0x03, 0x88, 0x9b, 0x9b, 0x18, 0x11, 0xb5, 0x44, 0xb0, 0x31, 0x07, 0x24,
	0xa4, 0xc8, 0x71, 0x16, 0xc7, 0x8a, 0xb3, 0x6b, 0x79, 0x37, 0x41, 0x7e, 0x00, 0x9e, 0x99, 0x2b,
	0xf2, 0xae, 0x03, 0x8e, 0x9a, 0xd2, 0x1e, 0x7a, 0x89, 0x26, 0xdf, 0xcc, 0xfc, 0xbe, 0xf1, 0xee,
	0x2c, 0xa0, 0x28, 0x67, 0x9c, 0x47, 0x8c, 0x52, 0x12, 0x09, 0x3b, 0xcb, 0x99, 0x60, 0xa8, 0x55,
	0xd7, 0xac, 0x45, 0x9c, 0x88, 0xc5, 0x7a, 0x66, 0x47, 0x6c, 0xe5, 0x50, 0x22, 0x7e, 0xb2, 0x7c,
	0xc9, 0x49, 0xbe, 0x49, 0x22, 0xb2, 0x22, 0x7c, 0xb1, 0x4f, 0x8a, 0x18, 0x15, 0x39, 0x4b, 0xb3,
	0x34, 0xa4, 0xc4, 0xc9, 0x96, 0xb1, 0x13, 0x66, 0x09, 0x77, 0x52, 0x16, 0x85, 0xa9, 0x53, 0x51,
	0x13, 0x46, 0x6b, 0xa1, 0xf2, 0xb5, 0x92, 0x47, 0x72, 0xca, 0xc9, 0x8a, 0x09, 0xf2, 0x5f, 0xab,
	0xcb, 0x9a, 0x55, 0xcc, 0xd2, 0x90, 0xc6, 0x8e, 0x4c, 0xcc, 0xd6, 0x3f, 0x9c, 0x4c, 0x14, 0x19,
	0xe1, 0x0e, 0x59, 0x65, 0xa2, 0x50, 0xbf, 0xaa, 0xe9, 0xfc, 0x97, 0x0e, 0xdd, 0x41, 0x79, 0x34,
	0x03, 0x85, 0xf3, 0x37, 0x84, 0x0a, 0xf4, 0x16, 0x8e, 0xca, 0x06, 0x53, 0xeb, 0x69, 0xfd, 0x8e,
	0xfb, 0xda, 0xde, 0x39, 0xd0, 0x5b, 0xe5, 0x41, 0x91, 0x11, 0x2c, 0x1b, 0xd0, 0x37, 0xe8, 0xc8,
	0xda, 0x69, 0x55, 0xcc, 0x4d, 0xbd, 0x77, 0xd8, 0x6f, 0xba, 0xee, 0x3d, 0x88, 0x1d, 0x85, 0xfb,
	0x54, 0xe4, 0x05, 0x6e, 0x47, 0x75, 0xcd, 0xfa, 0x0e, 0xe8, 0x76, 0x11, 0x32, 0xe0, 0x70, 0x49,
	0x0a, 0x39, 0xe8, 0x29, 0x2e, 0x43, 0x74, 0x01, 0xc7, 0x9b, 0x30, 0x5d, 0x13, 0x53, 0xef, 0x69,
	0xfd, 0xa6, 0x6b, 0xdd, 0xed, 0x8c, 0x55, 0xe1, 0x7b, 0xfd, 0x9d, 0x76, 0xfe, 0x5b, 0x87, 0x56,
	0x3d, 0x87, 0x3a, 0xa0, 0x27, 0xf3, 0x8a, 0xab, 0x27, 0x73, 0x64, 0xc2, 0x49, 0x16, 0x16, 0x29,
	0x0b, 0xe7, 0x12, 0x7c, 0x8a, 0xb7, 0x7f, 0x91, 0x07, 0x2d, 0xb9, 0x07, 0x53, 0xce, 0xd6, 0x79,
	0x44, 0xcc, 0x23, 0xe9, 0xfb, 0xc2, 0x96, 0xa2, 0x5d, 0xbb, 0xa6, 0xc1, 0xdf, 0xf0, 0xe3, 0x01,
	0x6e, 0xca, 0xf4, 0x44, 0xb6, 0xa0, 0x21, 0xb4, 0xd5, 0x05, 0x6f, 0x19, 0xc7, 0x92, 0xf1, 0xd2,
	0x56, 0xea, 0x9d, 0x90, 0x96, 0xca, 0x57, 0x94, 0x6b, 0xe8, 0xaa, 0x41, 0xe6, 0x84, 0x8b, 0x84,
	0x86, 0x65, 0x91, 0xd9, 0x78, 0xc0, 0x34, 0x1a, 0x36, 0x64, 0x7a, 0xf8, 0xaf, 0x0f, 0x8d, 0x01,
	0x55, 0x23, 0xd5, 0x69, 0x27, 0x0f, 0x99, 0x4b, 0xc3, 0x5d, 0x95, 0xaf, 0xf1, 0xae, 0x9e, 0x40,
	0x43, 0x7d, 0xdb, 0x55, 0x1b, 0x9a, 0x35, 0xe4, 0x9b, 0x6b, 0x78, 0xbe, 0x77, 0xa3, 0x90, 0x05,
	0x67, 0xa3, 0xf1, 0x28, 0x18, 0x79, 0x37, 0xd3, 0x49, 0xe0, 0x05, 0xfe, 0x34, 0xc0, 0xde, 0x78,
	0xf2, 0xc1, 0xc7, 0xc6, 0x01, 0x02, 0x68, 0x7c, 0xfd, 0x3c, 0xf4, 0x02, 0xdf, 0xd0, 0xca, 0x78,
	0xe8, 0xdf, 0xf8, 0x81, 0x6f, 0xe8, 0xee, 0x02, 0x9e, 0x7e, 0x62, 0x34, 0x11, 0x2c, 0xdf, 0xb9,
	0xcc, 0x2f, 0xf0, 0x6c, 0x8f, 0xcc, 0xd1, 0x99, 0x1d, 0x33, 0x16, 0xa7, 0xc4, 0xde, 0x3e, 0x14,
	0xdb, 0x2f, 0xdf, 0x86, 0xf5, 0xea, 0x9e, 0x75, 0xbd, 0xd0, 0x66, 0x0d, 0xd9, 0x72, 0xf9, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x41, 0xde, 0xa1, 0x76, 0x6d, 0x04, 0x00, 0x00,
}

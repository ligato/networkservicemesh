// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkservice.proto

package networkservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/ligato/networkservicemesh/pkg/nsm/apis/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkServiceRequest struct {
	Connection               *Connection              `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	LocalMechanismPreference []*common.LocalMechanism `protobuf:"bytes,2,rep,name=local_mechanism_preference,json=localMechanismPreference,proto3" json:"local_mechanism_preference,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                 `json:"-"`
	XXX_unrecognized         []byte                   `json:"-"`
	XXX_sizecache            int32                    `json:"-"`
}

func (m *NetworkServiceRequest) Reset()         { *m = NetworkServiceRequest{} }
func (m *NetworkServiceRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceRequest) ProtoMessage()    {}
func (*NetworkServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_361e8247d5a9945c, []int{0}
}

func (m *NetworkServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceRequest.Unmarshal(m, b)
}
func (m *NetworkServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceRequest.Marshal(b, m, deterministic)
}
func (m *NetworkServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceRequest.Merge(m, src)
}
func (m *NetworkServiceRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceRequest.Size(m)
}
func (m *NetworkServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceRequest proto.InternalMessageInfo

func (m *NetworkServiceRequest) GetConnection() *Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *NetworkServiceRequest) GetLocalMechanismPreference() []*common.LocalMechanism {
	if m != nil {
		return m.LocalMechanismPreference
	}
	return nil
}

type Connection struct {
	ConnectionId         string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	NetworkService       string                 `protobuf:"bytes,2,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	LocalMechanism       *common.LocalMechanism `protobuf:"bytes,3,opt,name=local_mechanism,json=localMechanism,proto3" json:"local_mechanism,omitempty"`
	ConnectionContext    *ConnectionContext     `protobuf:"bytes,4,opt,name=connection_context,json=connectionContext,proto3" json:"connection_context,omitempty"`
	Labels               map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_361e8247d5a9945c, []int{1}
}

func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (m *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(m, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *Connection) GetNetworkService() string {
	if m != nil {
		return m.NetworkService
	}
	return ""
}

func (m *Connection) GetLocalMechanism() *common.LocalMechanism {
	if m != nil {
		return m.LocalMechanism
	}
	return nil
}

func (m *Connection) GetConnectionContext() *ConnectionContext {
	if m != nil {
		return m.ConnectionContext
	}
	return nil
}

func (m *Connection) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

//  ConnectionContext - end to end context for the connection between an NSC and NSE
//  Motivation:
//        Many things like addressing, routing, etc are generally best decided by
//        the NSE.
//        The NSC however has the best picture of what it needs.
//        Does it need ipv4 addressing on the connection endpoints?
//        Does it need a set of IPv6 prefixes valid in the context of that connection
//        it can use for downstream clients?
//        Are there prefixes that cannot be used in the context of the connection
//        because they are used elsewhere?
type ConnectionContext struct {
	//   context - a key value map of context information it can be used to communicate
	//             the NSC's needs (partially specified) or the NSEs decisions (fully specified)
	//   Known keys - all of these keys are optional
	//   context[requires] - comma separated list of keys the NSC needs to get back in the context from the NSE
	//                       Example: requires=src_ip,dst_ip, ip_routes
	//   context[src_ip] - ip addresses of the source end of the connection
	//                         Example src_ip=1.1.1.1/30
	//                         Typically provided by NSE, but may be proposed by NSC
	//   context[dst_ip] - ip addresses of destination end of the connection, typically provided by NSE, but may be proposed by NSC
	//   context[src_mac] - mac address of source end of the connection, typically provided by NSE, but may be proposed by NSC
	//   context[dst_mac] - mac address of source end of the connection
	//   context[exclude_prefixes] - comma seperated list of ip prefixes, specified by NSC that cannot be used in response by NSE
	//   context[ip_routes] - comma seperated list of ip prefixes to be routed to the connection, typically specified by NSE
	//   Note: This list will expand and evolve
	ConnectionContext    map[string]string `protobuf:"bytes,1,rep,name=connection_context,json=connectionContext,proto3" json:"connection_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConnectionContext) Reset()         { *m = ConnectionContext{} }
func (m *ConnectionContext) String() string { return proto.CompactTextString(m) }
func (*ConnectionContext) ProtoMessage()    {}
func (*ConnectionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_361e8247d5a9945c, []int{2}
}

func (m *ConnectionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionContext.Unmarshal(m, b)
}
func (m *ConnectionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionContext.Marshal(b, m, deterministic)
}
func (m *ConnectionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionContext.Merge(m, src)
}
func (m *ConnectionContext) XXX_Size() int {
	return xxx_messageInfo_ConnectionContext.Size(m)
}
func (m *ConnectionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionContext.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionContext proto.InternalMessageInfo

func (m *ConnectionContext) GetConnectionContext() map[string]string {
	if m != nil {
		return m.ConnectionContext
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkServiceRequest)(nil), "networkservice.NetworkServiceRequest")
	proto.RegisterType((*Connection)(nil), "networkservice.Connection")
	proto.RegisterMapType((map[string]string)(nil), "networkservice.Connection.LabelsEntry")
	proto.RegisterType((*ConnectionContext)(nil), "networkservice.ConnectionContext")
	proto.RegisterMapType((map[string]string)(nil), "networkservice.ConnectionContext.ConnectionContextEntry")
}

func init() { proto.RegisterFile("networkservice.proto", fileDescriptor_361e8247d5a9945c) }

var fileDescriptor_361e8247d5a9945c = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x65, 0x87, 0xb4, 0x62, 0x42, 0x53, 0x3a, 0x2a, 0x95, 0xe5, 0x53, 0x09, 0x02, 0x7a,
	0xb2, 0x51, 0xb8, 0x94, 0x1e, 0xa8, 0x50, 0xc8, 0x01, 0x29, 0x45, 0x95, 0xe1, 0x1e, 0x39, 0xdb,
	0x21, 0xb1, 0xb2, 0x7f, 0x8c, 0x77, 0x53, 0xc8, 0x13, 0x21, 0x5e, 0x83, 0xa7, 0xe1, 0x31, 0x50,
	0xd7, 0xeb, 0x26, 0xce, 0x3f, 0x04, 0x27, 0x7b, 0x47, 0xdf, 0x7c, 0xfb, 0xfb, 0x46, 0x63, 0xc3,
	0xb1, 0x24, 0xf3, 0x4d, 0x15, 0x53, 0x4d, 0xc5, 0x6d, 0xc6, 0x28, 0xca, 0x0b, 0x65, 0x14, 0xb6,
	0xeb, 0xd5, 0xb0, 0x3f, 0xce, 0xcc, 0x64, 0x36, 0x8a, 0x98, 0x12, 0x31, 0xcf, 0xc6, 0xa9, 0x51,
	0x71, 0x5d, 0x21, 0x48, 0x4f, 0xe2, 0x7c, 0x3a, 0x8e, 0xa5, 0x16, 0x71, 0x9a, 0x67, 0x3a, 0x66,
	0x4a, 0x08, 0x25, 0xdd, 0xa3, 0xb4, 0xed, 0xfc, 0xf4, 0xe0, 0xc9, 0xc7, 0xb2, 0xef, 0x53, 0xd9,
	0x97, 0xd0, 0xd7, 0x19, 0x69, 0x83, 0x17, 0x00, 0x4c, 0x49, 0x49, 0xcc, 0x64, 0x4a, 0x06, 0xde,
	0xa9, 0x77, 0xd6, 0xea, 0x86, 0xd1, 0x0a, 0x5b, 0xef, 0x5e, 0x91, 0x2c, 0xa9, 0xf1, 0x33, 0x84,
	0x5c, 0xb1, 0x94, 0x0f, 0x05, 0xb1, 0x49, 0x2a, 0x33, 0x2d, 0x86, 0x79, 0x41, 0x5f, 0xa8, 0x20,
	0xc9, 0x28, 0xf0, 0x4f, 0x1b, 0x67, 0xad, 0xee, 0x49, 0xe4, 0x40, 0x06, 0x77, 0xca, 0xab, 0x4a,
	0x98, 0x04, 0xbc, 0x76, 0xbe, 0xbe, 0xef, 0xeb, 0xfc, 0xf6, 0x01, 0x16, 0x17, 0xe2, 0x33, 0x38,
	0x58, 0x5c, 0x39, 0xcc, 0x6e, 0x2c, 0xe3, 0xc3, 0xe4, 0xd1, 0xa2, 0xf8, 0xe1, 0x06, 0x5f, 0xc2,
	0xa1, 0x43, 0x1e, 0x3a, 0xe6, 0xc0, 0xb7, 0xb2, 0x6a, 0x9e, 0x2e, 0x35, 0x5e, 0xc2, 0xe1, 0x0a,
	0x72, 0xd0, 0xb0, 0x99, 0xb7, 0x71, 0xb6, 0xeb, 0x9c, 0x78, 0x0d, 0xb8, 0x84, 0xc3, 0x94, 0x34,
	0xf4, 0xdd, 0x04, 0x0f, 0xac, 0xc7, 0xd3, 0xed, 0x73, 0xeb, 0x95, 0xc2, 0xe4, 0x88, 0xad, 0x96,
	0xf0, 0x2d, 0xec, 0xf1, 0x74, 0x44, 0x5c, 0x07, 0x4d, 0x3b, 0xb1, 0x17, 0xdb, 0x5d, 0xa2, 0x81,
	0x15, 0xf6, 0xa5, 0x29, 0xe6, 0x89, 0xeb, 0x0a, 0xdf, 0x40, 0x6b, 0xa9, 0x8c, 0x8f, 0xa1, 0x31,
	0xa5, 0xb9, 0x9b, 0xd2, 0xdd, 0x2b, 0x1e, 0x43, 0xf3, 0x36, 0xe5, 0xb3, 0x6a, 0x24, 0xe5, 0xe1,
	0xc2, 0x3f, 0xf7, 0x3a, 0xbf, 0x3c, 0x38, 0x5a, 0x63, 0xc4, 0xf1, 0xc6, 0x88, 0x9e, 0x85, 0x3b,
	0xff, 0x6b, 0xc4, 0xf5, 0x4a, 0x89, 0xbb, 0x9e, 0x3c, 0x7c, 0x0f, 0x27, 0x9b, 0xc5, 0xff, 0x12,
	0xa2, 0xfb, 0xc3, 0x87, 0x76, 0x7d, 0xb7, 0x71, 0x00, 0xfb, 0xd5, 0x7e, 0x3f, 0x5f, 0x05, 0xde,
	0xf8, 0x19, 0x84, 0x3b, 0x56, 0x1e, 0x2f, 0xa1, 0xd9, 0xe3, 0x4a, 0x13, 0xee, 0x10, 0xed, 0x34,
	0xe8, 0xc1, 0xfe, 0x95, 0x92, 0x99, 0x51, 0xc5, 0xff, 0x5a, 0xbc, 0xf2, 0xf0, 0x1d, 0xa0, 0x33,
	0x59, 0x94, 0x35, 0x1e, 0x54, 0x6b, 0xdb, 0x17, 0xb9, 0x99, 0xef, 0xb6, 0x18, 0xed, 0xd9, 0x9f,
	0xc1, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x2b, 0x9f, 0xa1, 0x7b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	Request(ctx context.Context, in *NetworkServiceRequest, opts ...grpc.CallOption) (*Connection, error)
	Close(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Connection, error)
	Monitor(ctx context.Context, in *Connection, opts ...grpc.CallOption) (NetworkService_MonitorClient, error)
	MonitorConnections(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (NetworkService_MonitorConnectionsClient, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) Request(ctx context.Context, in *NetworkServiceRequest, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/networkservice.NetworkService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Close(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/networkservice.NetworkService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Monitor(ctx context.Context, in *Connection, opts ...grpc.CallOption) (NetworkService_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkService_serviceDesc.Streams[0], "/networkservice.NetworkService/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_MonitorClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type networkServiceMonitorClient struct {
	grpc.ClientStream
}

func (x *networkServiceMonitorClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceClient) MonitorConnections(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (NetworkService_MonitorConnectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkService_serviceDesc.Streams[1], "/networkservice.NetworkService/MonitorConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceMonitorConnectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_MonitorConnectionsClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type networkServiceMonitorConnectionsClient struct {
	grpc.ClientStream
}

func (x *networkServiceMonitorConnectionsClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	Request(context.Context, *NetworkServiceRequest) (*Connection, error)
	Close(context.Context, *Connection) (*Connection, error)
	Monitor(*Connection, NetworkService_MonitorServer) error
	MonitorConnections(*common.Empty, NetworkService_MonitorConnectionsServer) error
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Request(ctx, req.(*NetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Close(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).Monitor(m, &networkServiceMonitorServer{stream})
}

type NetworkService_MonitorServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type networkServiceMonitorServer struct {
	grpc.ServerStream
}

func (x *networkServiceMonitorServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkService_MonitorConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).MonitorConnections(m, &networkServiceMonitorConnectionsServer{stream})
}

type NetworkService_MonitorConnectionsServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type networkServiceMonitorConnectionsServer struct {
	grpc.ServerStream
}

func (x *networkServiceMonitorConnectionsServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _NetworkService_Request_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _NetworkService_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _NetworkService_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorConnections",
			Handler:       _NetworkService_MonitorConnections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "networkservice.proto",
}

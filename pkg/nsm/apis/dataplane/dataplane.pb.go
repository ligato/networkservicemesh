// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dataplane.proto

package dataplane

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/ligato/networkservicemesh/pkg/nsm/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message sent by dataplane module informing NSM of any changes in its
// operations parameters or constraints
type DataplaneUpdate struct {
	RemoteMechanism      []*common.RemoteMechanism `protobuf:"bytes,1,rep,name=remote_mechanism,json=remoteMechanism" json:"remote_mechanism,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DataplaneUpdate) Reset()         { *m = DataplaneUpdate{} }
func (m *DataplaneUpdate) String() string { return proto.CompactTextString(m) }
func (*DataplaneUpdate) ProtoMessage()    {}
func (*DataplaneUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dataplane_80f4e223ff9f5f30, []int{0}
}
func (m *DataplaneUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataplaneUpdate.Unmarshal(m, b)
}
func (m *DataplaneUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataplaneUpdate.Marshal(b, m, deterministic)
}
func (dst *DataplaneUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneUpdate.Merge(dst, src)
}
func (m *DataplaneUpdate) XXX_Size() int {
	return xxx_messageInfo_DataplaneUpdate.Size(m)
}
func (m *DataplaneUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneUpdate proto.InternalMessageInfo

func (m *DataplaneUpdate) GetRemoteMechanism() []*common.RemoteMechanism {
	if m != nil {
		return m.RemoteMechanism
	}
	return nil
}

type Connection struct {
	LocalSource *common.LocalMechanism `protobuf:"bytes,1,opt,name=local_source,json=localSource" json:"local_source,omitempty"`
	// Types that are valid to be assigned to Destination:
	//	*Connection_Local
	//	*Connection_Remote
	Destination isConnection_Destination `protobuf_oneof:"destination"`
	// For ConnectRequest this will be nil, but for DisconnectRequest it will
	// carry a connection id returned by the dataplane controller
	ConnectionId         string   `protobuf:"bytes,4,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_dataplane_80f4e223ff9f5f30, []int{1}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (dst *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(dst, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

type isConnection_Destination interface {
	isConnection_Destination()
}

type Connection_Local struct {
	Local *common.LocalMechanism `protobuf:"bytes,2,opt,name=local,oneof"`
}
type Connection_Remote struct {
	Remote *common.RemoteMechanism `protobuf:"bytes,3,opt,name=remote,oneof"`
}

func (*Connection_Local) isConnection_Destination()  {}
func (*Connection_Remote) isConnection_Destination() {}

func (m *Connection) GetDestination() isConnection_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Connection) GetLocalSource() *common.LocalMechanism {
	if m != nil {
		return m.LocalSource
	}
	return nil
}

func (m *Connection) GetLocal() *common.LocalMechanism {
	if x, ok := m.GetDestination().(*Connection_Local); ok {
		return x.Local
	}
	return nil
}

func (m *Connection) GetRemote() *common.RemoteMechanism {
	if x, ok := m.GetDestination().(*Connection_Remote); ok {
		return x.Remote
	}
	return nil
}

func (m *Connection) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Connection) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Connection_OneofMarshaler, _Connection_OneofUnmarshaler, _Connection_OneofSizer, []interface{}{
		(*Connection_Local)(nil),
		(*Connection_Remote)(nil),
	}
}

func _Connection_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Connection)
	// destination
	switch x := m.Destination.(type) {
	case *Connection_Local:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Local); err != nil {
			return err
		}
	case *Connection_Remote:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Remote); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Connection.Destination has unexpected type %T", x)
	}
	return nil
}

func _Connection_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Connection)
	switch tag {
	case 2: // destination.local
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.LocalMechanism)
		err := b.DecodeMessage(msg)
		m.Destination = &Connection_Local{msg}
		return true, err
	case 3: // destination.remote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.RemoteMechanism)
		err := b.DecodeMessage(msg)
		m.Destination = &Connection_Remote{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Connection_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Connection)
	// destination
	switch x := m.Destination.(type) {
	case *Connection_Local:
		s := proto.Size(x.Local)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Connection_Remote:
		s := proto.Size(x.Remote)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Reply struct {
	Success       bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ExtendedError string `protobuf:"bytes,2,opt,name=extended_error,json=extendedError" json:"extended_error,omitempty"`
	// ConnectRequest will populate this field with connection id returned by the
	// dataplane controller
	// DisconnectRequest ignores this field
	ConnectionId         string   `protobuf:"bytes,3,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dataplane_80f4e223ff9f5f30, []int{2}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (dst *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(dst, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Reply) GetExtendedError() string {
	if m != nil {
		return m.ExtendedError
	}
	return ""
}

func (m *Reply) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func init() {
	proto.RegisterType((*DataplaneUpdate)(nil), "dataplane.DataplaneUpdate")
	proto.RegisterType((*Connection)(nil), "dataplane.Connection")
	proto.RegisterType((*Reply)(nil), "dataplane.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataplaneOperationsClient is the client API for DataplaneOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataplaneOperationsClient interface {
	UpdateDataplane(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (DataplaneOperations_UpdateDataplaneClient, error)
	ConnectRequest(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Reply, error)
	DisconnectRequest(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Reply, error)
}

type dataplaneOperationsClient struct {
	cc *grpc.ClientConn
}

func NewDataplaneOperationsClient(cc *grpc.ClientConn) DataplaneOperationsClient {
	return &dataplaneOperationsClient{cc}
}

func (c *dataplaneOperationsClient) UpdateDataplane(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (DataplaneOperations_UpdateDataplaneClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataplaneOperations_serviceDesc.Streams[0], "/dataplane.DataplaneOperations/UpdateDataplane", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataplaneOperationsUpdateDataplaneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataplaneOperations_UpdateDataplaneClient interface {
	Recv() (*DataplaneUpdate, error)
	grpc.ClientStream
}

type dataplaneOperationsUpdateDataplaneClient struct {
	grpc.ClientStream
}

func (x *dataplaneOperationsUpdateDataplaneClient) Recv() (*DataplaneUpdate, error) {
	m := new(DataplaneUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataplaneOperationsClient) ConnectRequest(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/dataplane.DataplaneOperations/ConnectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneOperationsClient) DisconnectRequest(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/dataplane.DataplaneOperations/DisconnectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataplaneOperations service

type DataplaneOperationsServer interface {
	UpdateDataplane(*common.Empty, DataplaneOperations_UpdateDataplaneServer) error
	ConnectRequest(context.Context, *Connection) (*Reply, error)
	DisconnectRequest(context.Context, *Connection) (*Reply, error)
}

func RegisterDataplaneOperationsServer(s *grpc.Server, srv DataplaneOperationsServer) {
	s.RegisterService(&_DataplaneOperations_serviceDesc, srv)
}

func _DataplaneOperations_UpdateDataplane_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataplaneOperationsServer).UpdateDataplane(m, &dataplaneOperationsUpdateDataplaneServer{stream})
}

type DataplaneOperations_UpdateDataplaneServer interface {
	Send(*DataplaneUpdate) error
	grpc.ServerStream
}

type dataplaneOperationsUpdateDataplaneServer struct {
	grpc.ServerStream
}

func (x *dataplaneOperationsUpdateDataplaneServer) Send(m *DataplaneUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _DataplaneOperations_ConnectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneOperationsServer).ConnectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplane.DataplaneOperations/ConnectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneOperationsServer).ConnectRequest(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataplaneOperations_DisconnectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneOperationsServer).DisconnectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplane.DataplaneOperations/DisconnectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneOperationsServer).DisconnectRequest(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataplaneOperations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataplane.DataplaneOperations",
	HandlerType: (*DataplaneOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectRequest",
			Handler:    _DataplaneOperations_ConnectRequest_Handler,
		},
		{
			MethodName: "DisconnectRequest",
			Handler:    _DataplaneOperations_DisconnectRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateDataplane",
			Handler:       _DataplaneOperations_UpdateDataplane_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataplane.proto",
}

func init() { proto.RegisterFile("dataplane.proto", fileDescriptor_dataplane_80f4e223ff9f5f30) }

var fileDescriptor_dataplane_80f4e223ff9f5f30 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x6f, 0x13, 0x31,
	0x14, 0xec, 0x12, 0x5a, 0xc8, 0x4b, 0xb7, 0x5b, 0x8c, 0x80, 0xd5, 0x9e, 0xa2, 0x20, 0xa4, 0x9c,
	0x76, 0x21, 0x9c, 0x2a, 0x21, 0x0e, 0xa5, 0x91, 0x8a, 0x04, 0x42, 0x32, 0xea, 0x79, 0xe5, 0x7a,
	0x9f, 0x12, 0xab, 0xeb, 0x0f, 0x6c, 0x2f, 0xd0, 0x3f, 0xc9, 0x4f, 0xe0, 0xb7, 0xa0, 0x78, 0xbf,
	0x0a, 0x11, 0x1c, 0x38, 0x59, 0x9e, 0x37, 0x6f, 0x3c, 0xa3, 0x31, 0x24, 0x15, 0xf3, 0xcc, 0xd4,
	0x4c, 0x61, 0x6e, 0xac, 0xf6, 0x9a, 0x4c, 0x07, 0x20, 0x5b, 0x6f, 0x84, 0xdf, 0x36, 0xd7, 0x39,
	0xd7, 0xb2, 0xa8, 0xc5, 0x86, 0x79, 0x5d, 0x28, 0xf4, 0xdf, 0xb4, 0xbd, 0x71, 0x68, 0xbf, 0x0a,
	0x8e, 0x12, 0xdd, 0xb6, 0x30, 0x37, 0x9b, 0x42, 0x39, 0x59, 0x30, 0x23, 0x5c, 0xc1, 0xb5, 0x94,
	0x5a, 0x75, 0x47, 0xab, 0xb8, 0xb8, 0x82, 0xe4, 0xa2, 0xd7, 0xbc, 0x32, 0x15, 0xf3, 0x48, 0xce,
	0xe1, 0xd4, 0xa2, 0xd4, 0x1e, 0x4b, 0x89, 0x7c, 0xcb, 0x94, 0x70, 0x32, 0x8d, 0xe6, 0x93, 0xe5,
	0x6c, 0xf5, 0x2c, 0xef, 0x76, 0x69, 0x98, 0x7f, 0xec, 0xc7, 0x34, 0xb1, 0xbf, 0x03, 0x8b, 0x9f,
	0x11, 0xc0, 0x3b, 0xad, 0x14, 0x72, 0x2f, 0xb4, 0x22, 0x67, 0x70, 0x5c, 0x6b, 0xce, 0xea, 0xd2,
	0xe9, 0xc6, 0x72, 0x4c, 0xa3, 0x79, 0xb4, 0x9c, 0xad, 0x9e, 0xf6, 0x72, 0x1f, 0x76, 0xb3, 0x51,
	0x6d, 0x16, 0xb8, 0x9f, 0x03, 0x95, 0xe4, 0x70, 0x18, 0xae, 0xe9, 0xbd, 0x7f, 0xed, 0x5c, 0x1e,
	0xd0, 0x96, 0x46, 0x5e, 0xc1, 0x51, 0x6b, 0x26, 0x9d, 0x84, 0x85, 0xbf, 0x79, 0xbe, 0x3c, 0xa0,
	0x1d, 0x91, 0x3c, 0x87, 0x98, 0x0f, 0x5e, 0x4b, 0x51, 0xa5, 0xf7, 0xe7, 0xd1, 0x72, 0x4a, 0x8f,
	0x47, 0xf0, 0x7d, 0x75, 0x1e, 0xc3, 0xac, 0x42, 0xe7, 0x85, 0x62, 0x3b, 0x60, 0x21, 0xe1, 0x90,
	0xa2, 0xa9, 0x6f, 0x49, 0x0a, 0x0f, 0x5c, 0xc3, 0x39, 0x3a, 0x17, 0x52, 0x3d, 0xa4, 0xfd, 0x95,
	0xbc, 0x80, 0x13, 0xfc, 0xee, 0x51, 0x55, 0x58, 0x95, 0x68, 0xad, 0xb6, 0x21, 0xc2, 0x94, 0xc6,
	0x3d, 0xba, 0xde, 0x81, 0xfb, 0xaf, 0x4f, 0xf6, 0x5f, 0x5f, 0xfd, 0x88, 0xe0, 0xf1, 0xd0, 0xd3,
	0x27, 0x83, 0x36, 0xb8, 0x70, 0xe4, 0x2d, 0x24, 0x6d, 0x6b, 0xc3, 0x90, 0xc4, 0x7d, 0xe0, 0xb5,
	0x34, 0xfe, 0x36, 0xcb, 0xf2, 0xf1, 0x13, 0xfd, 0xd1, 0xf4, 0xcb, 0x88, 0x9c, 0xc1, 0x49, 0x57,
	0x13, 0xc5, 0x2f, 0x0d, 0x3a, 0x4f, 0x9e, 0xdc, 0xe1, 0x8f, 0x0d, 0x66, 0xa7, 0x77, 0xe0, 0x36,
	0xf8, 0x1b, 0x78, 0x74, 0x21, 0x1c, 0xff, 0xbf, 0xed, 0xeb, 0xa3, 0xf0, 0xfd, 0x5e, 0xff, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x03, 0x38, 0xc6, 0xe9, 0xe3, 0x02, 0x00, 0x00,
}

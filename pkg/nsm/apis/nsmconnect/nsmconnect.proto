syntax = "proto3";

package nsmconnect;

import "github.com/ligato/networkservicemesh/netmesh/model/netmesh/netmesh.proto";

message Label {
    map<string ,string> selector = 1;
}

message Metadata {
    string name = 1;
    string namespace = 2;
    Label labels = 3;
}

message KernelInterface {
   Metadata metadata = 1;
// Interface specific parameters go here.
}

message VhostUserInterface{
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message MemInterface {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message SRIOV {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

enum InterfaceType {
    NOT_SPECIFIED_TYPE = 0;
    KERNEL_INTERFACE = 1;
    VHOST_INTERFACE = 2;
    MEM_INTERFACE = 3;
    SRIOV_INTERFACE = 4;
  }

enum InterfacePreference {
    NOT_SPECIFIED_PREF = 0;
    FIRST = 1;
    SECOND = 2;
    THIRD = 3;
    FORTH = 4;
    FIFTH = 5;
}

message MechanismType {
    InterfaceType type = 1;
    InterfacePreference preference = 2;
  }

// ConnectionRequest is sent by a client or NSEP to build a connection.
message ConnectionRequest {
// Since connection request will trigger certain actions
// executed by NSM for a client to address idempotency, request_id
// will be tracked.
    string request_id = 1;

    Metadata metadata = 2;
    
    string network_service_name = 3;

    repeated MechanismType type = 4;

    KernelInterface kernel_interface = 6;

    VhostUserInterface vhost_user_interface = 7;

    MemInterface mem_interface = 8;

    SRIOV sriov_interface = 9;
}

message ConnectionParameters {
    string address = 1;
    repeated string route = 2;
}

// ConnectionAccept is sent back by NSM as a reply to ConnectionRequest
// accepted true will indicate that the connection is accepted, otherwise false
// indicates that connection was refused and admission_error will provide details
// why connection was refused.
message ConnectionAccept {
    bool accepted = 1;

    string admission_error = 2;

    ConnectionParameters connection_parameters = 3;

    oneof accepted_interface {
         KernelInterface kernel_interface = 4;

         VhostUserInterface vhost_user_interface = 5;

         MemInterface mem_interface = 6;

         SRIOV sriov_interface = 7;
    }
}

// DiscoveryRequest requests NSM to send back all available/known NetworkServices
message DiscoveryRequest {
}

// DiscoveryRespons carries a list of all available/known to NSM NetworkServices
message DiscoveryResponse {
    repeated  netmesh.NetworkService network_service = 1;
}

service ClientConnection {
    rpc RequestConnection(ConnectionRequest) returns(ConnectionAccept);
    rpc RequestDiscovery(DiscoveryRequest) returns(DiscoveryResponse);
}

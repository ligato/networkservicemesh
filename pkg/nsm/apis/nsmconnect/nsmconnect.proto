syntax = "proto3";

package nsmconnect;

import "github.com/ligato/networkservicemesh/netmesh/model/netmesh/netmesh.proto";

message Label {
    map<string ,string> selector = 1;
}

message Metadata {
    string name = 1;
    string namespace = 2;
    Label labels = 3;
}

message NetworkInterface {
    oneof interface {
        KernelInterface kernel_interface = 1;
        VhostUserInterface vhost_interface = 2;
        MemInterface mem_interface = 3;
        SRIOV srvio_interface = 4;
        HWInterface hw_interface = 5;
    }
}

message KernelInterface {
   Metadata metadata = 1;
// Interface specific parameters go here.
}

message VhostUserInterface{
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message MemInterface {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message SRIOV {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message HWInterface {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

// ConnectionRequest is sent by a client or NSEP to build a connection.
message ConnectionRequest {
// Since connection request will trigger certain actions
// executed by NSM for a client to address idempotency, request_id
// will be tracked.
    string request_id = 1;

    Metadata metadata = 2;
    
    string network_service_name = 3;

    repeated NetworkInterface network_interface = 4;
}

message ConnectionParameters {
    string address = 1;
    repeated string route = 2;
}

// ConnectionAccept is sent back by NSM as a reply to ConnectionRequest
// accepted true will indicate that the connection is accepted, otherwise false
// indicates that connection was refused and admission_error will provide details
// why connection was refused.
message ConnectionAccept {
    bool accepted = 1;

    string admission_error = 2;

    ConnectionParameters connection_parameters = 3;

    NetworkInterface accepted_interface = 4;
}

// DiscoveryRequest requests NSM to send back all available/known NetworkServices
message DiscoveryRequest {
}

// DiscoveryRespons carries a list of all available/known to NSM NetworkServices
message DiscoveryResponse {
    repeated  netmesh.NetworkService network_service = 1;
}

service ClientConnection {
    rpc RequestConnection(ConnectionRequest) returns(ConnectionAccept);
    rpc RequestDiscovery(DiscoveryRequest) returns(DiscoveryResponse);
}

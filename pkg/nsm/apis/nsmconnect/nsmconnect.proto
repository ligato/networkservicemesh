syntax = "proto3";

package nsmconnect;

import "github.com/ligato/networkservicemesh/netmesh/model/netmesh/netmesh.proto";

message Label {
    map<string ,string> selector = 1;
}

message Metadata {
    string name = 1;
    string namespace = 2;
    Label labels = 3;
}

message KernelInterface {
   Metadata metadata = 1;
// Interface specific parameters go here.
}

message VhostUserInterface{
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message MemInterface {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

message SRIOV {
    Metadata metadata = 1;
// Interface specific parameters go here.
}

enum InterfaceType {
    kernel_interface = 0;
    vhost_user = 1;
    memif = 2;
    sriov = 3;
  }

enum InterfacePreference {
    first = 0;
    second = 1;
    third = 2;
    forth = 3;
    fifth = 4;
}

message MechanismType {
    InterfaceType type = 1;
    InterfacePreference preference = 2;
  }

message AffinityPreference {
    string predicate = 1;
}

message ConnectionRequest {
// Since connection request will trigger certain actions
// executed by NSM for a client to address idempotency, request_id
// will be tracked.
    string request_id = 1;

    Metadata metadata = 2;
    
    string network_service_name = 3;

    repeated MechanismType type = 4;

    repeated AffinityPreference predicate = 5;

    string device_claim = 6;

    KernelInterface kernel_interface = 7;

    VhostUserInterface vhost_user_interface = 8;

    MemInterface mem_interface = 9;

    SRIOV sriov_interface = 10;
}

message ConnectionParameters {
    string address = 1;
    repeated string route = 2;
}

message ConnectionAccept {
    bool accepted = 1;

    string admission_error = 2;

    repeated MechanismType accepted_type = 3;

    KernelInterface kernel_interface = 4;

    VhostUserInterface vhost_user_interface = 5;

    MemInterface mem_interface = 6;

    SRIOV sriov_interface = 7;
}

message DiscoveryRequest {
}

message DiscoveryResponse {
    repeated  netmesh.NetworkService network_service = 1;
}

service ClientConnection {
    rpc RequestConnection(ConnectionRequest) returns(ConnectionAccept);
    rpc RequestDiscovery(DiscoveryRequest) returns(DiscoveryResponse);
}

syntax = "proto3";

package nsmconnect;

import "github.com/ligato/networkservicemesh/pkg/nsm/apis/netmesh/netmesh.proto";
import "github.com/ligato/networkservicemesh/pkg/nsm/apis/common/common.proto";

// ConnectionRequest is sent by a NSM client to build a connection.
message ConnectionRequest {
// Since connection request will trigger certain actions
// executed by NSM for a client to address idempotency, request_id
// will be tracked.
    string request_id = 1;

    common.Metadata metadata = 2;
    
    string network_service_name = 3;

    string linux_namespace = 4;

    repeated common.Interface interface = 5;
}

message ConnectionParameters {
    string address = 1;
    repeated string route = 2;
}

// ConnectionAccept is sent back by NSM as a reply to ConnectionRequest
// accepted true will indicate that the connection is accepted, otherwise false
// indicates that connection was refused and admission_error will provide details
// why connection was refused.
message ConnectionAccept {
    bool accepted = 1;

    string admission_error = 2;

    ConnectionParameters connection_parameters = 3;

    common.Interface interface = 4;
}

// DiscoveryRequest requests NSM to send back all available/known NetworkServices
message DiscoveryRequest {
}

// DiscoveryRespons carries a list of all available/known to NSM NetworkServices
message DiscoveryResponse {
    repeated  netmesh.NetworkService network_service = 1;
}

// ChannelAdvertiseRequest used by NSE to advertise its available channels
message ChannelAdvertiseRequest {
    repeated netmesh.NetworkServiceChannel netmesh_channel = 1;
}

// ChannelAdvertiseResponse used by NSM to confirm if Channel Object has been created successfully
message ChannelAdvertiseResponse {
    bool success = 1;
}

service ClientConnection {
    rpc RequestConnection (ConnectionRequest) returns (ConnectionAccept);
    rpc RequestDiscovery (DiscoveryRequest) returns (DiscoveryResponse);
    rpc RequestAdvertiseChannel (ChannelAdvertiseRequest) returns (ChannelAdvertiseResponse);
}

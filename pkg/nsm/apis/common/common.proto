// Copyright 2018 Red Hat, Inc.
// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

syntax = "proto3";

package common;

// common.proto contains common protobuf structures used by other
// proto messages in NSM API.
//

message Empty{

}

message LocalMechanism {
   LocalMechanismType type = 1;
   map<string,string> parameters = 2;
}

enum LocalMechanismType {
    DEFAULT_INTERFACE = 0;
    KERNEL_INTERFACE = 1;
    VHOST_INTERFACE = 2;
    MEM_INTERFACE = 3;
    SRIOV_INTERFACE = 4;
    HW_INTERFACE = 5;
}
// RemoteMechanism - Mechanism for connecting to a remote NSE
// A RemoteMechanism may be partially specified, to communicate preferences
// to a peer when negotiating a RemoteConnection, or may be fully specified
// to indicate the outcome of that negotiation.
message RemoteMechanism {
    // RemoteMechanismType - type of RemoteMechanism
    RemoteMechanismType type = 1;
    // parameters - parameters for the RemoteMechanism
    // Known Keys:
    //     parameters[src_ip] - ip used on by source NSM for the mechanism, specified by source NSM
    //     parameters[dst_ip] - ip used on by destination NSM for the mechanism, specified by destination NSM
    //     parameters[vnis] - comma seperated list of acceptable vnis for VXLAN, typically specified by source NSM
    //                        Example: vnis=10-20,50-100
    //     parameters[vni]  - actual vni used in fully specified VXLAN RemoteMechanism, typically specified by destination NSM
    map<string,string> parameters = 2;
}

enum RemoteMechanismType {
    NONE = 0;
    VXLAN = 1;
    VXLAN_GPE = 2;
    GRE = 3;
    SRV6 = 4;
    MPLSoEthernet = 5;
    MPLSoGRE = 6;
    MPLSoUDP = 7;
}


//  ConnectionContext - end to end context for the connection between an NSC and NSE
//  Motivation:
//        Many things like addressing, routing, etc are generally best decided by
//        the NSE.  
//        The NSC however has the best picture of what it needs.
//        Does it need ipv4 addressing on the connection endpoints?
//        Does it need a set of IPv6 prefixes valid in the context of that connection
//        it can use for downstream clients?
//        Are there prefixes that cannot be used in the context of the connection
//        because they are used elsewhere?
message ConnectionContext {
    //   context - a key value map of context information it can be used to communicate
    //             the NSC's needs (partially specified) or the NSEs decisions (fully specified)
    //   Known keys - all of these keys are optional
    //   context[requires] - comma separated list of keys the NSC needs to get back in the context from the NSE
    //                       Example: requires=src_ip,dst_ip, ip_routes
    //   context[src_ip] - ip addresses of the source end of the connection
    //                         Example src_ip=1.1.1.1/30
    //                         Typically provided by NSE, but may be proposed by NSC
    //   context[dst_ip] - ip addresses of destination end of the connection, typically provided by NSE, but may be proposed by NSC
    //   context[src_mac] - mac address of source end of the connection, typically provided by NSE, but may be proposed by NSC
    //   context[dst_mac] - mac address of source end of the connection
    //   context[exclude_prefixes] - comma seperated list of ip prefixes, specified by NSC that cannot be used in response by NSE
    //   context[ip_routes] - comma seperated list of ip prefixes to be routed to the connection, typically specified by NSE
    //   Note: This list will expand and evolve
    map<string,string> connection_context = 1;
}
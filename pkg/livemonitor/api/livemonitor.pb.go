// Code generated by protoc-gen-go. DO NOT EDIT.
// source: livemonitor.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("livemonitor.proto", fileDescriptor_0a49b69d6eb929e4) }

var fileDescriptor_0a49b69d6eb929e4 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xc9, 0x2c, 0x4b,
	0xcd, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0x2c, 0xc8, 0x94, 0x92, 0x28, 0x28, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x4f, 0xcd, 0x2d, 0x28, 0xa9,
	0x84, 0x90, 0x10, 0x69, 0xa3, 0x30, 0x2e, 0x7e, 0x9f, 0xcc, 0xb2, 0xd4, 0xbc, 0xd4, 0xe2, 0x62,
	0x5f, 0x88, 0x3e, 0x21, 0x67, 0x2e, 0x7e, 0x28, 0x13, 0x26, 0x23, 0x24, 0xa6, 0x97, 0x9e, 0x9f,
	0x9f, 0x9e, 0x93, 0x0a, 0xd1, 0x94, 0x54, 0x9a, 0xa6, 0xe7, 0x0a, 0x32, 0x43, 0x0a, 0x87, 0xb8,
	0x01, 0x63, 0x12, 0x1b, 0x58, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xba, 0x27, 0x59,
	0x92, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LivenessMonitorClient is the client API for LivenessMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LivenessMonitorClient interface {
	MonitorLiveness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LivenessMonitor_MonitorLivenessClient, error)
}

type livenessMonitorClient struct {
	cc *grpc.ClientConn
}

func NewLivenessMonitorClient(cc *grpc.ClientConn) LivenessMonitorClient {
	return &livenessMonitorClient{cc}
}

func (c *livenessMonitorClient) MonitorLiveness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LivenessMonitor_MonitorLivenessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LivenessMonitor_serviceDesc.Streams[0], "/api.LivenessMonitor/MonitorLiveness", opts...)
	if err != nil {
		return nil, err
	}
	x := &livenessMonitorMonitorLivenessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LivenessMonitor_MonitorLivenessClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type livenessMonitorMonitorLivenessClient struct {
	grpc.ClientStream
}

func (x *livenessMonitorMonitorLivenessClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LivenessMonitorServer is the server API for LivenessMonitor service.
type LivenessMonitorServer interface {
	MonitorLiveness(*empty.Empty, LivenessMonitor_MonitorLivenessServer) error
}

// UnimplementedLivenessMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedLivenessMonitorServer struct {
}

func (*UnimplementedLivenessMonitorServer) MonitorLiveness(req *empty.Empty, srv LivenessMonitor_MonitorLivenessServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorLiveness not implemented")
}

func RegisterLivenessMonitorServer(s *grpc.Server, srv LivenessMonitorServer) {
	s.RegisterService(&_LivenessMonitor_serviceDesc, srv)
}

func _LivenessMonitor_MonitorLiveness_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LivenessMonitorServer).MonitorLiveness(m, &livenessMonitorMonitorLivenessServer{stream})
}

type LivenessMonitor_MonitorLivenessServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type livenessMonitorMonitorLivenessServer struct {
	grpc.ServerStream
}

func (x *livenessMonitorMonitorLivenessServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

var _LivenessMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.LivenessMonitor",
	HandlerType: (*LivenessMonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorLiveness",
			Handler:       _LivenessMonitor_MonitorLiveness_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "livemonitor.proto",
}

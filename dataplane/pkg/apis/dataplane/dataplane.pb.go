// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dataplane.proto

package dataplane

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	connection1 "github.com/ligato/networkservicemesh/controlplane/pkg/apis/local/connection"
	connection "github.com/ligato/networkservicemesh/controlplane/pkg/apis/remote/connection"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message sent by dataplane module informing NSM of any changes in its
// operations parameters or constraints
type MechanismUpdate struct {
	RemoteMechanisms     []*connection.Mechanism  `protobuf:"bytes,1,rep,name=remote_mechanisms,json=remoteMechanisms,proto3" json:"remote_mechanisms,omitempty"`
	LocalMechanisms      []*connection1.Mechanism `protobuf:"bytes,2,rep,name=local_mechanisms,json=localMechanisms,proto3" json:"local_mechanisms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MechanismUpdate) Reset()         { *m = MechanismUpdate{} }
func (m *MechanismUpdate) String() string { return proto.CompactTextString(m) }
func (*MechanismUpdate) ProtoMessage()    {}
func (*MechanismUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_617387e490a04ffa, []int{0}
}

func (m *MechanismUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MechanismUpdate.Unmarshal(m, b)
}
func (m *MechanismUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MechanismUpdate.Marshal(b, m, deterministic)
}
func (m *MechanismUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MechanismUpdate.Merge(m, src)
}
func (m *MechanismUpdate) XXX_Size() int {
	return xxx_messageInfo_MechanismUpdate.Size(m)
}
func (m *MechanismUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MechanismUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MechanismUpdate proto.InternalMessageInfo

func (m *MechanismUpdate) GetRemoteMechanisms() []*connection.Mechanism {
	if m != nil {
		return m.RemoteMechanisms
	}
	return nil
}

func (m *MechanismUpdate) GetLocalMechanisms() []*connection1.Mechanism {
	if m != nil {
		return m.LocalMechanisms
	}
	return nil
}

type CrossConnect struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*CrossConnect_LocalSource
	//	*CrossConnect_RemoteSource
	Source isCrossConnect_Source `protobuf_oneof:"source"`
	// Types that are valid to be assigned to Destination:
	//	*CrossConnect_LocalDestination
	//	*CrossConnect_RemoteDestination
	Destination          isCrossConnect_Destination `protobuf_oneof:"destination"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CrossConnect) Reset()         { *m = CrossConnect{} }
func (m *CrossConnect) String() string { return proto.CompactTextString(m) }
func (*CrossConnect) ProtoMessage()    {}
func (*CrossConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_617387e490a04ffa, []int{1}
}

func (m *CrossConnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossConnect.Unmarshal(m, b)
}
func (m *CrossConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossConnect.Marshal(b, m, deterministic)
}
func (m *CrossConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossConnect.Merge(m, src)
}
func (m *CrossConnect) XXX_Size() int {
	return xxx_messageInfo_CrossConnect.Size(m)
}
func (m *CrossConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossConnect.DiscardUnknown(m)
}

var xxx_messageInfo_CrossConnect proto.InternalMessageInfo

func (m *CrossConnect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrossConnect) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type isCrossConnect_Source interface {
	isCrossConnect_Source()
}

type CrossConnect_LocalSource struct {
	LocalSource *connection1.Connection `protobuf:"bytes,3,opt,name=local_source,json=localSource,proto3,oneof"`
}

type CrossConnect_RemoteSource struct {
	RemoteSource *connection.Connection `protobuf:"bytes,4,opt,name=remote_source,json=remoteSource,proto3,oneof"`
}

func (*CrossConnect_LocalSource) isCrossConnect_Source() {}

func (*CrossConnect_RemoteSource) isCrossConnect_Source() {}

func (m *CrossConnect) GetSource() isCrossConnect_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CrossConnect) GetLocalSource() *connection1.Connection {
	if x, ok := m.GetSource().(*CrossConnect_LocalSource); ok {
		return x.LocalSource
	}
	return nil
}

func (m *CrossConnect) GetRemoteSource() *connection.Connection {
	if x, ok := m.GetSource().(*CrossConnect_RemoteSource); ok {
		return x.RemoteSource
	}
	return nil
}

type isCrossConnect_Destination interface {
	isCrossConnect_Destination()
}

type CrossConnect_LocalDestination struct {
	LocalDestination *connection1.Connection `protobuf:"bytes,5,opt,name=local_destination,json=localDestination,proto3,oneof"`
}

type CrossConnect_RemoteDestination struct {
	RemoteDestination *connection.Connection `protobuf:"bytes,6,opt,name=remote_destination,json=remoteDestination,proto3,oneof"`
}

func (*CrossConnect_LocalDestination) isCrossConnect_Destination() {}

func (*CrossConnect_RemoteDestination) isCrossConnect_Destination() {}

func (m *CrossConnect) GetDestination() isCrossConnect_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *CrossConnect) GetLocalDestination() *connection1.Connection {
	if x, ok := m.GetDestination().(*CrossConnect_LocalDestination); ok {
		return x.LocalDestination
	}
	return nil
}

func (m *CrossConnect) GetRemoteDestination() *connection.Connection {
	if x, ok := m.GetDestination().(*CrossConnect_RemoteDestination); ok {
		return x.RemoteDestination
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CrossConnect) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CrossConnect_OneofMarshaler, _CrossConnect_OneofUnmarshaler, _CrossConnect_OneofSizer, []interface{}{
		(*CrossConnect_LocalSource)(nil),
		(*CrossConnect_RemoteSource)(nil),
		(*CrossConnect_LocalDestination)(nil),
		(*CrossConnect_RemoteDestination)(nil),
	}
}

func _CrossConnect_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CrossConnect)
	// source
	switch x := m.Source.(type) {
	case *CrossConnect_LocalSource:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalSource); err != nil {
			return err
		}
	case *CrossConnect_RemoteSource:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrossConnect.Source has unexpected type %T", x)
	}
	// destination
	switch x := m.Destination.(type) {
	case *CrossConnect_LocalDestination:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalDestination); err != nil {
			return err
		}
	case *CrossConnect_RemoteDestination:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteDestination); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrossConnect.Destination has unexpected type %T", x)
	}
	return nil
}

func _CrossConnect_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CrossConnect)
	switch tag {
	case 3: // source.local_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection1.Connection)
		err := b.DecodeMessage(msg)
		m.Source = &CrossConnect_LocalSource{msg}
		return true, err
	case 4: // source.remote_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection.Connection)
		err := b.DecodeMessage(msg)
		m.Source = &CrossConnect_RemoteSource{msg}
		return true, err
	case 5: // destination.local_destination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection1.Connection)
		err := b.DecodeMessage(msg)
		m.Destination = &CrossConnect_LocalDestination{msg}
		return true, err
	case 6: // destination.remote_destination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(connection.Connection)
		err := b.DecodeMessage(msg)
		m.Destination = &CrossConnect_RemoteDestination{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CrossConnect_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CrossConnect)
	// source
	switch x := m.Source.(type) {
	case *CrossConnect_LocalSource:
		s := proto.Size(x.LocalSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrossConnect_RemoteSource:
		s := proto.Size(x.RemoteSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// destination
	switch x := m.Destination.(type) {
	case *CrossConnect_LocalDestination:
		s := proto.Size(x.LocalDestination)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrossConnect_RemoteDestination:
		s := proto.Size(x.RemoteDestination)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*MechanismUpdate)(nil), "dataplane.MechanismUpdate")
	proto.RegisterType((*CrossConnect)(nil), "dataplane.CrossConnect")
}

func init() { proto.RegisterFile("dataplane.proto", fileDescriptor_617387e490a04ffa) }

var fileDescriptor_617387e490a04ffa = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0xc6, 0x3a, 0xea, 0x76, 0x74, 0xb3, 0x10, 0x44, 0x01, 0xa4, 0x6a, 0xa7, 0x9d,
	0xe2, 0x69, 0xbb, 0x20, 0x71, 0x62, 0x2d, 0x88, 0x09, 0x8d, 0x43, 0x10, 0x37, 0x10, 0x72, 0x13,
	0x2f, 0xb5, 0xe6, 0xf8, 0x99, 0xd8, 0x01, 0xf5, 0x9b, 0xf0, 0x01, 0xf8, 0x8e, 0x5c, 0x51, 0xed,
	0x34, 0x35, 0xb0, 0xa0, 0x49, 0xbb, 0x44, 0x8e, 0xff, 0xef, 0xfd, 0xde, 0xdf, 0xcf, 0xcf, 0x78,
	0x52, 0x30, 0xcb, 0xb4, 0x64, 0x8a, 0xa7, 0xba, 0x06, 0x0b, 0x64, 0xd8, 0x6d, 0x24, 0x9f, 0x4a,
	0x61, 0x97, 0xcd, 0x22, 0xcd, 0xa1, 0xa2, 0x52, 0x94, 0xcc, 0x02, 0x55, 0xdc, 0x7e, 0x87, 0xfa,
	0xda, 0xf0, 0xfa, 0x9b, 0xc8, 0x79, 0xc5, 0xcd, 0x92, 0xe6, 0xa0, 0x6c, 0x0d, 0xd2, 0xa5, 0x50,
	0x7d, 0x5d, 0x52, 0xa6, 0x85, 0xa1, 0x12, 0x72, 0x26, 0xd7, 0x9a, 0xe2, 0xb9, 0x15, 0xa0, 0x82,
	0xa5, 0x2f, 0x94, 0x7c, 0xbe, 0x03, 0xbd, 0xe6, 0x15, 0x58, 0xfe, 0x5f, 0xfc, 0x59, 0x80, 0x2f,
	0x41, 0x32, 0x55, 0x52, 0x27, 0x2c, 0x9a, 0x2b, 0xaa, 0xed, 0x4a, 0x73, 0x43, 0x79, 0xa5, 0xed,
	0xca, 0x7f, 0x7d, 0xd2, 0xd1, 0x4f, 0x84, 0x27, 0x97, 0x3c, 0x5f, 0x32, 0x25, 0x4c, 0xf5, 0x51,
	0x17, 0xcc, 0x72, 0x72, 0x81, 0x0f, 0x7d, 0xb9, 0x2f, 0xd5, 0x46, 0x31, 0x31, 0x9a, 0xee, 0x1c,
	0x8f, 0x4e, 0x9f, 0xa5, 0x5e, 0x49, 0x83, 0xea, 0x5d, 0x7a, 0x76, 0xe0, 0xc5, 0x6e, 0xc3, 0x90,
	0x37, 0xf8, 0xc0, 0xf5, 0x25, 0x24, 0x45, 0x8e, 0xf4, 0x34, 0x75, 0xc2, 0xcd, 0xa0, 0x89, 0xd3,
	0xb6, 0x9c, 0xa3, 0x5f, 0x11, 0x1e, 0xcf, 0x6a, 0x30, 0x66, 0xe6, 0xc3, 0xc9, 0x43, 0x1c, 0x89,
	0x22, 0x46, 0x53, 0x74, 0x3c, 0xcc, 0x22, 0x51, 0x90, 0x18, 0xef, 0x69, 0xb6, 0x92, 0xc0, 0x8a,
	0x38, 0x72, 0x9b, 0x9b, 0x5f, 0xf2, 0x0a, 0x8f, 0xbd, 0x05, 0x03, 0x4d, 0x9d, 0xf3, 0x78, 0x67,
	0x8a, 0xdc, 0x41, 0xfe, 0x29, 0x3f, 0xeb, 0x96, 0x6f, 0xef, 0x65, 0x23, 0x27, 0x7f, 0x70, 0x29,
	0x64, 0x8e, 0xf7, 0xdb, 0x86, 0xb4, 0x8c, 0xfb, 0x8e, 0xf1, 0xfc, 0x86, 0x66, 0xfc, 0x01, 0x19,
	0x7b, 0xbd, 0xa5, 0xbc, 0xc3, 0x87, 0xde, 0x48, 0xc1, 0x8d, 0x15, 0x8a, 0xad, 0x83, 0xe2, 0xdd,
	0x5b, 0xb8, 0x41, 0x99, 0x6f, 0xe2, 0x7c, 0x9b, 0x47, 0xde, 0x63, 0xd2, 0x5a, 0x0a, 0x69, 0x83,
	0xdb, 0xf8, 0x42, 0x59, 0x7b, 0xbd, 0x01, 0xef, 0xfc, 0x01, 0x1e, 0xf8, 0xb3, 0x9d, 0xef, 0xe3,
	0x51, 0x80, 0x3c, 0xfd, 0x11, 0xe1, 0xe1, 0x7c, 0xf3, 0x40, 0xc8, 0x4b, 0xbc, 0x97, 0xf1, 0xaf,
	0x0d, 0x37, 0x96, 0x3c, 0x49, 0xb7, 0x0f, 0x29, 0xbc, 0x9a, 0xa4, 0x4f, 0x20, 0x2f, 0xf0, 0xee,
	0x4c, 0x82, 0xe1, 0xfd, 0xa9, 0x8f, 0xd3, 0x12, 0xa0, 0x94, 0xed, 0xcb, 0x5c, 0x34, 0x57, 0xe9,
	0xeb, 0xf5, 0xac, 0xae, 0x27, 0xf2, 0x12, 0x94, 0xb0, 0x50, 0x07, 0xb3, 0xd5, 0x13, 0x9c, 0x24,
	0x01, 0xfd, 0xaf, 0xd1, 0x3e, 0x41, 0xe4, 0x02, 0x3f, 0x6a, 0x51, 0x61, 0xe5, 0x7e, 0x5a, 0x9f,
	0xd7, 0x13, 0xb4, 0x18, 0xb8, 0xd0, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x93, 0x4b,
	0x8c, 0x52, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataplaneClient is the client API for Dataplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataplaneClient interface {
	Request(ctx context.Context, in *CrossConnect, opts ...grpc.CallOption) (*CrossConnect, error)
	Close(ctx context.Context, in *CrossConnect, opts ...grpc.CallOption) (*empty.Empty, error)
	MonitorMechanisms(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Dataplane_MonitorMechanismsClient, error)
	MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Dataplane_MonitorCrossConnectsClient, error)
}

type dataplaneClient struct {
	cc *grpc.ClientConn
}

func NewDataplaneClient(cc *grpc.ClientConn) DataplaneClient {
	return &dataplaneClient{cc}
}

func (c *dataplaneClient) Request(ctx context.Context, in *CrossConnect, opts ...grpc.CallOption) (*CrossConnect, error) {
	out := new(CrossConnect)
	err := c.cc.Invoke(ctx, "/dataplane.Dataplane/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) Close(ctx context.Context, in *CrossConnect, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dataplane.Dataplane/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) MonitorMechanisms(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Dataplane_MonitorMechanismsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dataplane_serviceDesc.Streams[0], "/dataplane.Dataplane/MonitorMechanisms", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataplaneMonitorMechanismsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dataplane_MonitorMechanismsClient interface {
	Recv() (*MechanismUpdate, error)
	grpc.ClientStream
}

type dataplaneMonitorMechanismsClient struct {
	grpc.ClientStream
}

func (x *dataplaneMonitorMechanismsClient) Recv() (*MechanismUpdate, error) {
	m := new(MechanismUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataplaneClient) MonitorCrossConnects(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Dataplane_MonitorCrossConnectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dataplane_serviceDesc.Streams[1], "/dataplane.Dataplane/MonitorCrossConnects", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataplaneMonitorCrossConnectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dataplane_MonitorCrossConnectsClient interface {
	Recv() (*CrossConnect, error)
	grpc.ClientStream
}

type dataplaneMonitorCrossConnectsClient struct {
	grpc.ClientStream
}

func (x *dataplaneMonitorCrossConnectsClient) Recv() (*CrossConnect, error) {
	m := new(CrossConnect)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataplaneServer is the server API for Dataplane service.
type DataplaneServer interface {
	Request(context.Context, *CrossConnect) (*CrossConnect, error)
	Close(context.Context, *CrossConnect) (*empty.Empty, error)
	MonitorMechanisms(*empty.Empty, Dataplane_MonitorMechanismsServer) error
	MonitorCrossConnects(*empty.Empty, Dataplane_MonitorCrossConnectsServer) error
}

func RegisterDataplaneServer(s *grpc.Server, srv DataplaneServer) {
	s.RegisterService(&_Dataplane_serviceDesc, srv)
}

func _Dataplane_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplane.Dataplane/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).Request(ctx, req.(*CrossConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplane.Dataplane/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).Close(ctx, req.(*CrossConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_MonitorMechanisms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataplaneServer).MonitorMechanisms(m, &dataplaneMonitorMechanismsServer{stream})
}

type Dataplane_MonitorMechanismsServer interface {
	Send(*MechanismUpdate) error
	grpc.ServerStream
}

type dataplaneMonitorMechanismsServer struct {
	grpc.ServerStream
}

func (x *dataplaneMonitorMechanismsServer) Send(m *MechanismUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Dataplane_MonitorCrossConnects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataplaneServer).MonitorCrossConnects(m, &dataplaneMonitorCrossConnectsServer{stream})
}

type Dataplane_MonitorCrossConnectsServer interface {
	Send(*CrossConnect) error
	grpc.ServerStream
}

type dataplaneMonitorCrossConnectsServer struct {
	grpc.ServerStream
}

func (x *dataplaneMonitorCrossConnectsServer) Send(m *CrossConnect) error {
	return x.ServerStream.SendMsg(m)
}

var _Dataplane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataplane.Dataplane",
	HandlerType: (*DataplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Dataplane_Request_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Dataplane_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorMechanisms",
			Handler:       _Dataplane_MonitorMechanisms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorCrossConnects",
			Handler:       _Dataplane_MonitorCrossConnects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataplane.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: federation.proto

package federation

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BundleEventType int32

const (
	BundleEventType_INITIAL_STATE_TRANSFER BundleEventType = 0
	BundleEventType_UPDATE                 BundleEventType = 1
	BundleEventType_DELETE                 BundleEventType = 2
)

var BundleEventType_name = map[int32]string{
	0: "INITIAL_STATE_TRANSFER",
	1: "UPDATE",
	2: "DELETE",
}

var BundleEventType_value = map[string]int32{
	"INITIAL_STATE_TRANSFER": 0,
	"UPDATE":                 1,
	"DELETE":                 2,
}

func (x BundleEventType) String() string {
	return proto.EnumName(BundleEventType_name, int32(x))
}

func (BundleEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7217fe47f5d68a8f, []int{0}
}

type BundleEvent struct {
	Type                 BundleEventType           `protobuf:"varint,1,opt,name=type,proto3,enum=federation.BundleEventType" json:"type,omitempty"`
	Bundles              map[string]*common.Bundle `protobuf:"bytes,2,rep,name=bundles,proto3" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BundleEvent) Reset()         { *m = BundleEvent{} }
func (m *BundleEvent) String() string { return proto.CompactTextString(m) }
func (*BundleEvent) ProtoMessage()    {}
func (*BundleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7217fe47f5d68a8f, []int{0}
}

func (m *BundleEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleEvent.Unmarshal(m, b)
}
func (m *BundleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleEvent.Marshal(b, m, deterministic)
}
func (m *BundleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleEvent.Merge(m, src)
}
func (m *BundleEvent) XXX_Size() int {
	return xxx_messageInfo_BundleEvent.Size(m)
}
func (m *BundleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BundleEvent proto.InternalMessageInfo

func (m *BundleEvent) GetType() BundleEventType {
	if m != nil {
		return m.Type
	}
	return BundleEventType_INITIAL_STATE_TRANSFER
}

func (m *BundleEvent) GetBundles() map[string]*common.Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

func init() {
	proto.RegisterEnum("federation.BundleEventType", BundleEventType_name, BundleEventType_value)
	proto.RegisterType((*BundleEvent)(nil), "federation.BundleEvent")
	proto.RegisterMapType((map[string]*common.Bundle)(nil), "federation.BundleEvent.BundlesEntry")
}

func init() { proto.RegisterFile("federation.proto", fileDescriptor_7217fe47f5d68a8f) }

var fileDescriptor_7217fe47f5d68a8f = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xfd, 0x6d, 0xf9, 0x89, 0x71, 0x20, 0xda, 0xac, 0xa8, 0xa4, 0x5e, 0x88, 0xf1, 0x40, 0x38,
	0x6c, 0x49, 0xbd, 0xa8, 0x07, 0x62, 0x91, 0x25, 0x21, 0x21, 0x84, 0x2c, 0xeb, 0x99, 0xf0, 0x67,
	0xc0, 0x46, 0xfa, 0x27, 0xed, 0x42, 0xd2, 0xaf, 0xe2, 0xa7, 0xf2, 0x23, 0x19, 0xba, 0x18, 0x2b,
	0x81, 0xd3, 0xbc, 0xcc, 0xbc, 0x37, 0x6f, 0xde, 0x2e, 0x98, 0x0b, 0x9c, 0x63, 0x3c, 0x51, 0x5e,
	0x18, 0xb0, 0x28, 0x0e, 0x55, 0x48, 0xe1, 0xb7, 0x63, 0xb5, 0x96, 0x9e, 0x7a, 0x5f, 0x4f, 0xd9,
	0x2c, 0xf4, 0xed, 0x24, 0xf2, 0x16, 0x0b, 0xdc, 0x96, 0x18, 0xed, 0x8c, 0xaa, 0xf1, 0xcb, 0xa6,
	0xc9, 0x9e, 0x98, 0x63, 0xcf, 0x42, 0xdf, 0x0f, 0x83, 0x5d, 0xd1, 0xbb, 0xee, 0xbe, 0x08, 0x94,
	0xda, 0xeb, 0x60, 0xbe, 0x42, 0xbe, 0xc1, 0x40, 0x51, 0x1b, 0xfe, 0xab, 0x34, 0xc2, 0x2a, 0xa9,
	0x91, 0xfa, 0xb9, 0x73, 0xcb, 0x72, 0xe6, 0x39, 0x9a, 0x4c, 0x23, 0x14, 0x19, 0x91, 0xb6, 0xe0,
	0x74, 0x9a, 0x0d, 0x92, 0xaa, 0x51, 0x2b, 0xd4, 0x4b, 0xce, 0xfd, 0x11, 0xcd, 0x0e, 0x27, 0x3c,
	0x50, 0x71, 0x2a, 0x7e, 0x44, 0xd6, 0x10, 0xca, 0xf9, 0x01, 0x35, 0xa1, 0xf0, 0x81, 0x69, 0xe6,
	0x7f, 0x26, 0xb6, 0x90, 0x36, 0xe0, 0x64, 0x33, 0x59, 0xad, 0xb1, 0x6a, 0xd4, 0x48, 0xbd, 0xe4,
	0x54, 0x58, 0x16, 0x8a, 0xed, 0x62, 0x68, 0xb1, 0xd0, 0x94, 0x67, 0xe3, 0x91, 0x34, 0x38, 0x5c,
	0xec, 0x9d, 0x4a, 0x2d, 0xb8, 0xee, 0x0d, 0x7a, 0xb2, 0xe7, 0xf6, 0xc7, 0x23, 0xe9, 0x4a, 0x3e,
	0x96, 0xc2, 0x1d, 0x8c, 0xba, 0x5c, 0x98, 0xff, 0x28, 0x40, 0xf1, 0x6d, 0xd8, 0x71, 0x25, 0x37,
	0xc9, 0x16, 0x77, 0x78, 0x9f, 0x4b, 0x6e, 0x1a, 0xce, 0x27, 0x81, 0xb2, 0xc0, 0xa5, 0x97, 0x28,
	0x9d, 0x85, 0xb6, 0xe1, 0xea, 0x35, 0xc6, 0x89, 0xc2, 0xae, 0xce, 0x87, 0x73, 0x6d, 0x43, 0x0f,
	0x5e, 0x64, 0x5d, 0xfe, 0xed, 0x72, 0x3f, 0x52, 0x29, 0xed, 0x42, 0xa5, 0xef, 0x25, 0x6a, 0x6f,
	0x43, 0x42, 0x0f, 0x91, 0xad, 0x9b, 0x23, 0x2f, 0xd9, 0x24, 0xd3, 0x62, 0xf6, 0x7b, 0x0f, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x54, 0x91, 0xfa, 0x28, 0x1d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	CreateFederatedBundle(ctx context.Context, in *common.Bundle, opts ...grpc.CallOption) (*common.Empty, error)
	ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *common.Bundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/federation.Registration/CreateFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registration_serviceDesc.Streams[0], "/federation.Registration/ListFederatedBundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationListFederatedBundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registration_ListFederatedBundlesClient interface {
	Recv() (*BundleEvent, error)
	grpc.ClientStream
}

type registrationListFederatedBundlesClient struct {
	grpc.ClientStream
}

func (x *registrationListFederatedBundlesClient) Recv() (*BundleEvent, error) {
	m := new(BundleEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	CreateFederatedBundle(context.Context, *common.Bundle) (*common.Empty, error)
	ListFederatedBundles(*common.Empty, Registration_ListFederatedBundlesServer) error
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) CreateFederatedBundle(ctx context.Context, req *common.Bundle) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFederatedBundle not implemented")
}
func (*UnimplementedRegistrationServer) ListFederatedBundles(req *common.Empty, srv Registration_ListFederatedBundlesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFederatedBundles not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/federation.Registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*common.Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistrationServer).ListFederatedBundles(m, &registrationListFederatedBundlesServer{stream})
}

type Registration_ListFederatedBundlesServer interface {
	Send(*BundleEvent) error
	grpc.ServerStream
}

type registrationListFederatedBundlesServer struct {
	grpc.ServerStream
}

func (x *registrationListFederatedBundlesServer) Send(m *BundleEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "federation.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFederatedBundles",
			Handler:       _Registration_ListFederatedBundles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "federation.proto",
}

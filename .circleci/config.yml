version: 2
jobs:
  sanity-check:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml' | grep -v 'vendor/')
      - run: go install ./vendor/k8s.io/kube-openapi/cmd/openapi-gen
      - run: make check dep-check verify

  build:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            go install ./vendor/k8s.io/kube-openapi/cmd/openapi-gen
            cd dataplanes/vpp ; make all ; cd -
            make verify docker-build docker-push
            cd dataplane/vpp;make verify docker-build docker-push;cd -
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            echo "Wait for 10 minutes to allow deploy to happen"
            typeset -i numsec=900
            typeset -i cnt=0
            while [ $cnt -lt ${numsec} ]; do
              echo -ne "Waited $cnt seconds out of $numsec\033[0K\r"
              ((cnt=cnt+1))
              sleep 1
            done
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH


  packet-deploy:
    working_directory: /cncf
    docker:
      - image: registry.cncf.ci/cncf/cross-cloud/provisioning:production
    steps:
      - checkout:
          path:
            nsm
      - run: nsm/.circleci/set-nameserver.sh
      - run: nsm/.circleci/provision.sh packet-deploy
      - run:
          when: on_fail
          command: nsm/.circleci/provision.sh packet-destroy
      - run:
          command: kubectl create -f /cncf/rbac/
          environment:
            KUBECONFIG: /cncf/data/kubeconfig
      - save_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  packet-integration-tests:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            mv /cncf/data ./data
          name: Move Cache
      - run:
          command: ./scripts/circle-integration-tests.sh
          environment:
            KUBECONFIG: /go/src/github.com/ligato/networkservicemesh/data/kubeconfig
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH


  packet-destroy:
    working_directory: /cncf
    docker:
      - image: registry.cncf.ci/cncf/cross-cloud/provisioning:production
    steps:
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - checkout:
          path:
            nsm
      - run: nsm/.circleci/set-nameserver.sh
      - run: nsm/.circleci/provision.sh packet-destroy
      - run:
          when: on_fail
          command: nsm/.circleci/provision.sh packet-destroy

workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - build:
          requires:
            - sanity-check
      - packet-deploy:
          requires:
            - sanity-check
      - packet-integration-tests:
          requires:
            - build
            - packet-deploy
      - packet-destroy:
          requires:
            - packet-integration-tests

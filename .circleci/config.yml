---
version: 2.1

orbs:
  kubectl:
    commands:
      create:
        description: "kubectl create"
        parameters:
          namespace:
            type: string
            default: default
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          other:
            type: string
            default: ""
          resource:
            type: enum
            enum: ["serviceaccount", "clusterrolebinding", "namespace"]
          value:
            type: string
        steps:
          - run:
              name: "Create of k8s << parameters.resource >>: << parameters.value >>"
              command: |
                kubectl create << parameters.resource >> \
                  --namespace << parameters.namespace >> \
                  --kubeconfig << parameters.kubeconfig >> \
                  << parameters.other >> \
                  << parameters.value >>
      delete:
        description: "kubectl delete"
        parameters:
          namespace:
            type: string
            default: default
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          other:
            type: string
            default: ""
          resource:
            type: enum
            enum: ["namespace"]
          value:
            type: string
        steps:
          - run:
              name: "Delete k8s << parameters.resource >>: << parameters.value >>"
              command: |
                kubectl delete << parameters.resource >> \
                  --namespace << parameters.namespace >> \
                  --kubeconfig << parameters.kubeconfig >> \
                  << parameters.other >> \
                  << parameters.value >>

      install-binary:
        description: "Install kubectl binary"
        parameters:
          version:
            type: string
            default: "v1.14.1"
        steps:
          - run:
              name: "Downloading binary: kubectl"
              command: |
                curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/<< parameters.version >>/bin/linux/amd64/kubectl && \
                  chmod +x "kubectl" && mv "kubectl" /go/bin/

  helm:
    commands:
      install:
        description: "Install helm"
        parameters:
          version:
            type: string
            default: "2.13.1"
          architecture:
            type: enum
            default: "linux-amd64"
            enum:
              - "darwin-amd64"
              - "linux-amd64"
              - "linux-arm"
              - "linux-arm64"
              - "linux-386"
              - "linux-ppc64le"
              - "linux-s390x"
              - "windows-amd64"
        steps:
          - run: wget https://storage.googleapis.com/kubernetes-helm/helm-v<< parameters.version >>-<< parameters.architecture >>.tar.gz
          - run: tar -zxvf helm-v<< parameters.version >>-<< parameters.architecture >>.tar.gz
          - run: mv << parameters.architecture >>/helm /go/bin/

      init:
        description: "Init helm"
        parameters:
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          service_account:
            type: string
            default: tiller
          namespace:
            type: string
            default: kube-system
        steps:
          - run:
              name: "Create k8s serviceaccount: << parameters.service_account >>"
              command: |
                kubectl create serviceaccount \
                  --namespace kube-system \
                  --kubeconfig << parameters.kubeconfig >> \
                  << parameters.service_account >>
          - run:
              name: "Create k8s clusterrolebinding: << parameters.service_account >>-cluster-rule"
              command: |
                kubectl create clusterrolebinding << parameters.service_account >>-cluster-rule \
                  --kubeconfig << parameters.kubeconfig >> \
                  --clusterrole=cluster-admin \
                  --serviceaccount=<< parameters.namespace >>:<< parameters.service_account >>
#          - kubectl/create:
#              resource: serviceaccount
#              namespace: << parameters.namespace >>
#              kubeconfig: << parameters.kubeconfig >>
#              value: << parameters.service_account >>
#          - kubectl/create:
#              resource: clusterrolebinding
#              namespace: << parameters.namespace >>
#              kubeconfig: << parameters.kubeconfig >>
#              value: "<< parameters.service_account >>-cluster-rule"
#              other: "--clusterrole=cluster-admin --serviceaccount=<< parameters.namespace >>:<< parameters.service_account >>"
          - run:
              name: "Init helm"
              command: |
                helm init \
                  --wait \
                  --kubeconfig << parameters.kubeconfig >> \
                  --service-account << parameters.service_account >>

      install-chart:
        description: "Install/upgrade helm chart"
        parameters:
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          timeout:
            type: integer
            default: 300
          namespace:
            type: string
            default: default
          other:
            type: string
            default: ""
          chart:
            type: string
          chart_name:
            type: string
        steps:
          - run:
              name: "Install helm chart: { name: << parameters.chart_name >>, chart: << parameters.chart >>, namespace: << parameters.namespace >> }"
              no_output_timeout: "<< parameters.timeout >>s"
              command: |
                helm upgrade --install << parameters.chart_name >> \
                  --kubeconfig << parameters.kubeconfig >> \
                  --timeout << parameters.timeout >> \
                  --namespace << parameters.namespace >> \
                  --wait \
                  << parameters.other >> \
                  << parameters.chart >>

      install-local-chart:
        description: "Install local helm chart"
        parameters:
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          timeout:
            type: integer
            default: 300
          namespace:
            type: string
            default: nsm-system
          other:
            type: string
            default: ""
          chart_name:
            type: string
        steps:
          - install-chart:
              chart: ./deployments/helm/<< parameters.chart_name >>
              chart_name: << parameters.chart_name >>
              kubeconfig: << parameters.kubeconfig >>
              timeout: << parameters.timeout >>
              namespace: << parameters.namespace >>
              other: '--set tag="${CIRCLE_SHA1:8:8}" << parameters.other >>'

      delete-chart:
        description: "Delete helm chart"
        parameters:
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          chart_name:
            type: string
        steps:
          - run:
              name: "Delete helm chart: { name: << parameters.chart_name >> }"
              command: helm delete --purge << parameters.chart_name >> --kubeconfig << parameters.kubeconfig >>

      delete-local-chart:
        description: "Delete local helm chart"
        parameters:
          kubeconfig:
            type: string
            default: "/home/circleci/project/data/kubeconfig"
          chart_name:
            type: string
        steps:
          - delete-chart:
              chart_name: << parameters.chart_name >>
              kubeconfig: << parameters.kubeconfig >>

commands:
  test-nsc-ping-all:
    description: "Test nsc_ping_all"
    parameters:
      kubeconfig:
        type: string
        default: "/home/circleci/project/data/kubeconfig"
      example_name:
        type: string
    steps:
      - checkout
      - run:
          name: "Test 'nsc_ping_all', example: << parameters.example_name >>"
          command: |
            ./scripts/nsc_ping_all.sh --kubeconfig << parameters.kubeconfig >>

  test-verify-vpn-gateway:
    description: "Test verify_vpn_gateway"
    parameters:
      kubeconfig:
        type: string
        default: "/home/circleci/project/data/kubeconfig"
      example_name:
        type: string
    steps:
      - checkout
      - run:
          name: "Test verify_vpn_gateway, example: << parameters.example_name >>"
          command: |
            ./scripts/verify_vpn_gateway.sh --kubeconfig << parameters.kubeconfig >>

  packet-destroy:
    description: "Destroy cloud resources for provider: packet"
    parameters:
      when:
        type: enum
        enum: ["on_fail", "always"]
        default: "always"
      restore_cache:
        type: boolean
        default: true
    steps:
      - when:
          condition: << parameters.restore_cache >>
          steps:
            - checkout
            - restore_cache:
                key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: ls -lh /home/circleci/project/terraform
          when: << parameters.when >>
      - run:
          command: ls -lh /home/circleci/project/terraform/terraform
          when: << parameters.when >>
      - run:
          command: cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
          when: << parameters.when >>
      - run:
          command: cd ./scripts/terraform && terraform init
          when: << parameters.when >>
      - run:
          command: |
            export TF_VAR_auth_token="${PACKET_AUTH_TOKEN}"
            export TF_VAR_master1_hostname="ci-${CIRCLE_BUILD_NUM}-master1"
            export TF_VAR_worker1_1_hostname="ci-${CIRCLE_BUILD_NUM}-worker1-1"
            export TF_VAR_master2_hostname="ci-${CIRCLE_BUILD_NUM}-master2"
            export TF_VAR_worker2_1_hostname="ci-${CIRCLE_BUILD_NUM}-worker2-1"
            export TF_VAR_project_id="${PACKET_PROJECT_ID}"
            export TF_VAR_public_key="/home/circleci/project/terraform/sshkey.pub"
            export TF_VAR_public_key_name="key-${CIRCLE_BUILD_NUM}"

            terraform destroy -auto-approve && cd ../..
          when: << parameters.when >>
      - run:
          command: .circleci/destroy-cluster.sh
          when: << parameters.when >>

  gke-destroy:
    description: "Destroy cloud resources for provider: gke"
    parameters:
      when:
        type: enum
        enum: ["on_fail", "always"]
        default: "always"
      gke_project_id:
        type: string
        default: "ci-management"
      cluster_id:
        type: string
    steps:
      - checkout
      - run:
          name: "Install google cloud SDK"
          when: << parameters.when >>
          command: |
            .circleci/gke/cleanup-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}" "dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"

  azure-destroy:
    description: "Destroy cloud resources for provider: azure"
    parameters:
      when:
        type: enum
        enum: ["on_fail", "always"]
        default: "always"
      cluster_id:
        type: string
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          when: << parameters.when >>
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Destroy AKS Cluster
          when: << parameters.when >>
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

jobs:
# generic
  binary-dependencies-init:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - kubectl/install-binary
      - helm/install
      - save_cache:
          key: binary-dependencies-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - /go/bin/kubectl
            - /go/bin/helm

# sanity
  sanity-check:
    resource_class: medium+
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
#      todo: remove
      - run: echo "ok"
#      - checkout
#      - run:
#          command: |
#            sudo apt-get install yamllint python3-pkg-resources
#            ./.circleci/install-shellcheck.sh
#      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
#      - run: go version
#      - run:
#          name: Download Go Dependencies
#          command: |
#            ./scripts/go-mod-download.sh
#      - run: "! go fmt ./... 2>&1 | read"
#      - run:
#          name: golint
#          command: |
#            go get golang.org/x/lint/golint
#            golint ./...
##      - run:
##          name: gosec
##          command: |
##            GO111MODULE=off go get github.com/securego/gosec/cmd/gosec/...
##            gosec -quiet -severity low -no-fail ./...
#      - run: ./scripts/prepare-generate.sh
#      - run: sudo ./scripts/install-protoc.sh
#      - run: go generate ./...
#      - run: make vet check
#      - run: go build ./...
#      - run: mkdir -p ~/junit/
#      - run:
#          command: |
#            export COMMIT="${CIRCLE_SHA1:8:8}"
#            export CONTAINER_TAG="${COMMIT}"
#            export CONTAINER_FORCE_PULL="true"
#            gotestsum --junitfile ~/junit/unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
#      - store_test_results:
#          path: ~/junit
#      - store_artifacts:
#          path: ~/junit
    environment:
      GO111MODULE: "on"

# packet
  packet-deploy:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
      - run: unzip terraform_0.11.13_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir terraform
      - run: ssh-keygen -t rsa -f terraform/sshkey -q -N ""
      - run: ssh-add terraform/sshkey
      - run: .circleci/provision.sh
      - run: cp -a scripts/terraform/ terraform/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - /go/bin/terraform
            - terraform

  packet-deploy-k8s:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: mkdir terraform
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: ssh-add terraform/sshkey
      - run: cp -a terraform/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: cd scripts/terraform && ./create-kubernetes-cluster.sh && cd ../..
      - run: make packet-get-kubeconfig
      - run:
          name: "Prepare cache data<< parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp kubeconfig data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-packet-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"

  packet-destroy:
    docker:
      - image: circleci/golang
    steps:
      - packet-destroy

# azure
  azure-deploy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Create AKS Cluster
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-start
          environment:
            AZURE_CREDENTIALS_PATH: "data/kubeconfig"
      - save_cache:
          key: cncf-data-azure-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
      - run:
          when: on_fail
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

  azure-destroy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - azure-destroy:
          cluster_id: << parameters.cluster_id >>

# aws
  aws-deploy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install AWS Prerequisites
          command: |
            ./scripts/aws/aws-init.sh
            mkdir -p data
            sudo cp "$HOME/bin/aws-iam-authenticator" data/aws-iam-authenticator
            sudo cp "$HOME/bin/aws-iam-authenticator" /usr/local/bin/aws-iam-authenticator
      - run:
          name: Create AWS Cluster
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            ./scripts/install-kubectl.sh
            make aws-start
            cp ~/.kube/config data/kubeconfig
          no_output_timeout: 40m
      - save_cache:
          key: cncf-data-aws-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
            - ~/.aws
            - ~/.kube
      - run:
          when: on_fail
          no_output_timeout: 40m
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            make aws-destroy

  aws-destroy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install AWS Prerequisites
          command: |
            ./scripts/aws/aws-init.sh
            sudo cp "$HOME/bin/aws-iam-authenticator" /usr/local/bin
      - run:
          name: Destroy AWS Cluster
          no_output_timeout: 40m
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            make aws-destroy

# gke
  gke-create-cluster:
    parameters:
      cluster_id:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Setup Google Kubernetes Cluster
          command: |
            .circleci/gke/init-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}"
            export GKE_CLUSTER_NAME="dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
            make gke-start
      - run:
          name: "Prepare cache data << parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp ~/.kube/config data/kubeconfig
            cat data/kubeconfig
      - run:
          when: on_fail
          command: sudo .circleci/gke/cleanup-gke.sh
      - save_cache:
          key: cncf-data-gke-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  gke-destroy-cluster:
    parameters:
      gke_project_id:
        type: string
        default: "ci-management"
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - gke-destroy:
          gke_project_id: << parameters.gke_project_id >>
          cluster_id: << parameters.cluster_id >>

# integration
  integration-tests:
    parameters:
      cloud_provider:
        type: string
      cluster_id:
        type: string
      test_tags:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
      namespace:
        type: string
        default: "default"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            mkdir terraform
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              cp /home/circleci/project/terraform/sshkey* /cncf/data
            else
              if [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
                sudo cp /home/circleci/project/data/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
              fi
            fi
      - run:
          name: Downloading go deps
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            # export CONTAINER_FORCE_PULL="true"
            cat /home/circleci/project/data/kubeconfig
            ./scripts/prepare-circle-integration-tests.sh
            mkdir -p ~/junit/
            ./scripts/go-mod-download.sh
          no_output_timeout: 40m
      - run:
          name: Running integration tests - <<parameters.test_tags>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            gotestsum --junitfile ~/junit/integration-tests-basic.xml -f standard-verbose ./test/... -timeout 30m -tags="<<parameters.test_tags>>"
          no_output_timeout: 40m
      - run:
          when: always
          name: Save postmortem data
          command: |
            make << parameters.cloud_provider >>-download-postmortem
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl -n $NSM_NAMESPACE get nodes
            kubectl -n $NSM_NAMESPACE get pods -o wide
            kubectl -n $NSM_NAMESPACE describe pods
      - run:
          when: on_fail
          command: |
            cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"
      NSM_NAMESPACE: "<< parameters.namespace >>"

# example
  example-test:
    parameters:
      cloud_provider:
        type: string
      cluster_id:
        type: string
      example:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
      namespace:
        type: string
        default: "nsm-system"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            mkdir terraform
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              cp /home/circleci/project/terraform/sshkey* /cncf/data
            else
              if [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
                sudo cp /home/circleci/project/data/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
              fi
            fi
            ./scripts/install-kubectl.sh
      - run:
          name: Deploy infra
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            make k8s-infra-deploy
            kubectl wait -n $NSM_NAMESPACE --timeout=150s --for condition=Ready --all pods
          no_output_timeout: 10m
      - run:
          name: Running example - <<parameters.example>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            make k8s-<<parameters.example>>-deploy
            kubectl wait -n $NSM_NAMESPACE --timeout=150s --for condition=Ready --all pods
          no_output_timeout: 10m
      - run:
          name: Verifying example - <<parameters.example>>
          command: |
            make k8s-check
      - run:
          name: Cleanup example - <<parameters.example>>
          command: |
            make k8s-delete
      - run:
          when: always
          name: Save postmortem data
          command: |
            make << parameters.cloud_provider >>-download-postmortem
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl -n $NSM_NAMESPACE get nodes
            kubectl -n $NSM_NAMESPACE get pods -o wide
            kubectl -n $NSM_NAMESPACE describe pods
      - run:
          when: on_fail
          command: |
            cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
            .circleci/cleanup-packet.sh
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"
      NSM_NAMESPACE: "<< parameters.namespace >>"
      CLUSTER_RULES_PREFIX: "null"

# build
  build-container:
    parameters:
      container:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            make docker-<< parameters.container >>-build
            make docker-<< parameters.container >>-push

# docker push
  docker-push-latest:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export PULL_TAG="${COMMIT}"
            export TAG="latest"
            export REPO="networkservicemesh"
            export CONTAINERS=(nsmd nsmd-k8s nsmdp crossconnect-monitor test-nse vppagent-icmp-responder-nse vppagent-nsc nsc vppagent-dataplane vppagent-dataplane-dev admission-webhook vppagent-firewall-nse)
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            for c in ${CONTAINERS[@]}; do
              docker pull ${REPO}/${c}:${PULL_TAG}
              docker tag ${REPO}/${c}:${PULL_TAG} ${REPO}/${c}:${TAG}
              docker push ${REPO}/${c}:${TAG}
            done

# helm
  helm-chart-tests:
    docker:
      - image: quay.io/helmpack/chart-testing:v2.3.0
    steps:
      - checkout
      - run:
          name: Install and lint Helm charts
          command: |
            .circleci/helm/test-charts.sh

  helm-examples-test:
    parameters:
      cloud_provider:
        type: enum
        enum: ["azure", "packet", "gke"]
      gke_project_id:
        type: string
        default: "ci-management"
      cluster_id:
        type: string
      namespace:
        type: string
        default: default
      kubeconfig:
        type: string
        default: "/home/circleci/project/data/kubeconfig"
      additional_steps:
        type: steps
        default: []
    docker:
      - image: circleci/golang
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    steps:
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: binary-dependencies-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - checkout
      - helm/init
      - kubectl/create:
          resource: namespace
          value: nsm-system
      # install nsm
      - helm/install-local-chart:
          chart_name: "nsm"
      - helm/install-local-chart:
          chart_name: "nsm-monitoring"
    # examples
      - helm/install-local-chart:
          chart_name: "icmp-responder"
      - test-nsc-ping-all:
          example_name: "icmp-responder"
      - helm/delete-local-chart:
          chart_name: "icmp-responder"
      - helm/install-local-chart:
          chart_name: "vpn"
      - test-verify-vpn-gateway:
          example_name: "vpn"
      - helm/delete-local-chart:
          chart_name: "vpn"
      - helm/install-local-chart:
          chart_name: "vpp-icmp-responder"
      - test-nsc-ping-all:
          example_name: "vpp-icmp-responder"
      - helm/delete-local-chart:
          chart_name: "vpp-icmp-responder"
      # delete nsm
      - helm/delete-local-chart:
          chart_name: "nsm"
      - helm/delete-local-chart:
          chart_name: "nsm-monitoring"
      - kubectl/delete:
          resource: namespace
          value: nsm-system
      - run:
          name: "Describe k8s nodes"
          when: on_fail
          command: |
            kubectl describe nodes --kubeconfig << parameters.kubeconfig >>
      - run:
          name: "Get all k8s resources in nsm-system namespace"
          when: on_fail
          command: |
            kubectl get all -n nsm-system --kubeconfig << parameters.kubeconfig >>
      - run:
          name: "Get all k8s resources in namespace: << parameters.namespace >>"
          when: on_fail
          command: |
            kubectl get all -n << parameters.namespace >> --kubeconfig << parameters.kubeconfig >>
      - run:
          name: "Describe all k8s resources in namespace: nsm-system"
          when: on_fail
          command: |
            kubectl describe all -n nsm-system --kubeconfig << parameters.kubeconfig >>
      - run:
          name: "Describe all k8s resources in namespace: << parameters.namespace >>"
          when: on_fail
          command: |
            kubectl describe all -n << parameters.namespace >> --kubeconfig << parameters.kubeconfig >>
      - run:
          name: "Get k8s logs"
          when: on_fail
          command: make k8s-logs
      - steps: << parameters.additional_steps >>
    environment:
      KUBECONFIG: << parameters.kubeconfig >>

# workflows
workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - binary-dependencies-init

# build
      - build-container:
          name: "build-nsmd"
          container: "nsmd"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmd-k8s"
          container: "nsmd-k8s"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmdp"
          container: "nsmdp"
          requires:
            - sanity-check
      - build-container:
          name: "build-admission-webhook"
          container: "admission-webhook"
          requires:
            - sanity-check
      - build-container:
          name: "build-crossconnect-monitor"
          container: "crossconnect-monitor"
          requires:
            - sanity-check
      - build-container:
          name: "build-test-nse"
          container: "test-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-icmp-responder-nse"
          container: "vppagent-icmp-responder-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-nsc"
          container: "vppagent-nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsc"
          container: "nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane"
          container: "vppagent-dataplane"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane-dev"
          container: "vppagent-dataplane-dev"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-firewall-nse"
          container: "vppagent-firewall-nse"
          requires:
            - sanity-check

# packet
      - packet-deploy:
          requires:
            - sanity-check
      - packet-deploy-k8s:
          name: "packet-deploy-k8s-1"
          cluster_id: "1"
          requires:
            - packet-deploy
      - packet-deploy-k8s:
          name: "packet-deploy-k8s-2"
          cluster_id: "2"
          requires:
            - packet-deploy
      - helm-examples-test:
          name: "packet-deploy-helm-examples-1"
          cloud_provider: "packet"
          cluster_id: "1"
          requires:
            - binary-dependencies-init
            - packet-deploy
            - packet-deploy-k8s-1
          additional_steps:
            - packet-destroy:
                when: on_fail
                restore_cache: false
      - helm-examples-test:
          name: "packet-deploy-helm-examples-2"
          cloud_provider: "packet"
          cluster_id: "2"
          requires:
            - binary-dependencies-init
            - packet-deploy
            - packet-deploy-k8s-2
          additional_steps:
            - packet-destroy:
                when: on_fail
                restore_cache: false
      - integration-tests:
          name: "packet-test-basic-usecase"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "1"
          test_tags: "basic usecase"
          requires:
            - packet-deploy-k8s-1
            - packet-deploy-helm-examples-1
      - integration-tests:
          name: "packet-test-recover"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "recover"
          requires:
            - packet-deploy-k8s-2
            - packet-deploy-helm-examples-2
      - integration-tests:
          name: "packet-test-bench"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "bench"
          requires:
            - "packet-test-recover"
      - example-test:
          name: "packet-test-example-icmp"
          namespace: "nsm-system"
          cloud_provider: "packet"
          cluster_id: "2"
          example: "icmp"
          requires:
            - "packet-test-bench"
      - example-test:
          name: "packet-test-example-vpn"
          namespace: "nsm-system"
          cloud_provider: "packet"
          cluster_id: "2"
          example: "vpn"
          requires:
            - "packet-test-example-icmp"
      - packet-destroy:
          requires:
            - "packet-test-basic-usecase"
            - "packet-test-recover"
            - "packet-test-bench"
            - "packet-test-example-icmp"
            - "packet-test-example-vpn"

# azure
      - azure-deploy:
          name: "azure-deploy-k8s-1"
          cluster_id: "1"
          requires:
            - sanity-check
      - azure-deploy:
          name: "azure-deploy-k8s-2"
          cluster_id: "2"
          requires:
            - sanity-check
      - helm-examples-test:
           name: "azure-deploy-helm-examples-1"
           cloud_provider: "azure"
           cluster_id: "1"
           requires:
             - binary-dependencies-init
             - azure-deploy-k8s-1
           additional_steps:
             - azure-destroy:
                 when: on_fail
                 cluster_id: "1"
      - helm-examples-test:
           name: "azure-deploy-helm-examples-2"
           cloud_provider: "azure"
           cluster_id: "2"
           requires:
             - binary-dependencies-init
             - azure-deploy-k8s-2
           additional_steps:
             - azure-destroy:
                 when: on_fail
                 cluster_id: "2"
      - integration-tests:
          name: "azure-test-basic-usecase"
          cloud_provider: "azure"
          cluster_id: "1"
          test_tags: "basic usecase azure"
          requires:
            - azure-deploy-k8s-1
            - azure-deploy-helm-examples-1
      - integration-tests:
          name: "azure-test-recover"
          cloud_provider: "azure"
          cluster_id: "2"
          test_tags: "recover azure"
          requires:
            - azure-deploy-k8s-2
            - azure-deploy-helm-examples-2
      - azure-destroy:
          name: "azure-destroy-1"
          cluster_id: "1"
          requires:
            - azure-test-basic-usecase
      - azure-destroy:
          name: "azure-destroy-2"
          cluster_id: "2"
          requires:
            - azure-test-recover

# aws
      - aws-deploy:
          name: "aws-deploy-k8s-1"
          cluster_id: "1"
          requires:
            - sanity-check
      - aws-deploy:
          name: "aws-deploy-k8s-2"
          cluster_id: "2"
          requires:
            - sanity-check
      - aws-destroy:
          name: "aws-destroy-1"
          cluster_id: "1"
          requires:
            - aws-test-basic-usecase
      - aws-destroy:
          name: "aws-destroy-2"
          cluster_id: "2"
          requires:
            - aws-test-recover
      - integration-tests:
          name: "aws-test-basic-usecase"
          cloud_provider: "aws"
          cluster_id: "1"
          test_tags: "basic usecase aws"
          requires:
            - aws-deploy-k8s-1
      - integration-tests:
          name: "aws-test-recover"
          cloud_provider: "aws"
          cluster_id: "2"
          test_tags: "recover aws"
          requires:
            - aws-deploy-k8s-2

# gke
      - gke-create-cluster:
          cluster_id: "1"
          name: "gke-cluster1"
          requires:
            - sanity-check
      - gke-create-cluster:
          cluster_id: "2"
          name: "gke-cluster2"
          requires:
            - sanity-check
      - helm-examples-test:
          name: "gke-deploy-helm-examples-1"
          cloud_provider: "gke"
          cluster_id: "1"
          requires:
            - binary-dependencies-init
            - gke-cluster1
          additional_steps:
            - gke-destroy:
                when: on_fail
                cluster_id: "1"
      - helm-examples-test:
          name: "gke-deploy-helm-examples-2"
          cloud_provider: "gke"
          cluster_id: "2"
          requires:
            - binary-dependencies-init
            - gke-cluster2
          additional_steps:
            - gke-destroy:
                when: on_fail
                cluster_id: "2"
      - integration-tests:
          name: "gke-test-basic-usecase"
          cloud_provider: "gke"
          cluster_id: "1"
          test_tags: "basic usecase gke"
          requires:
            - sanity-check
            - "gke-cluster1"
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-test-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev
            - build-vppagent-firewall-nse
            - gke-deploy-helm-examples-1
      - integration-tests:
          name: "gke-test-recover"
          cloud_provider: "gke"
          cluster_id: "2"
          test_tags: "recover gke"
          requires:
            - sanity-check
            - "gke-cluster2"
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-test-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev
            - build-vppagent-firewall-nse
            - gke-deploy-helm-examples-2
      - gke-destroy-cluster:
          name: "gke-destroy-cluster1"
          cluster_id: "1"
          requires:
            - "gke-cluster1"
            - "gke-test-basic-usecase"
      - gke-destroy-cluster:
          name: "gke-destroy-cluster2"
          cluster_id: "2"
          requires:
            - "gke-cluster2"
            - "gke-test-recover"

# helm
      - helm-chart-tests:
          name: "helm-chart-tests"
          requires:
            - sanity-check

# push
      - docker-push-latest:
          requires:
            - packet-destroy
          filters:
            branches:
              only: master

---
version: 2.1

jobs:

# sanity
  test-sanity-check:
    resource_class: medium+
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run: go version
      - run:
          name: Download Go Dependencies
          command: |
            ./scripts/go-mod-download.sh
      - run:
          name: Check code formatting
          command: |
            make format
            git diff --exit-code || (echo 'Seems like your Go files are not properly formatted. Run `make format` in your branch and commit the changes.' && exit 1)
      - run: ./scripts/prepare-generate.sh
      - run: sudo ./scripts/install-protoc.sh
      - run: go generate ./...
      - run: make vet check
      - run: go build ./...
      - run: go test ./test/integration --list .* -tags basic recover usecase
      - run: mkdir -p ~/junit/
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export CONTAINER_REPO="networkservicemeshci"
            export CONTAINER_FORCE_PULL="true"
            gotestsum --junitfile ~/junit/unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
    environment:
      GO111MODULE: "on"

# code analysis
  test-static-code-analysis:
    resource_class: large
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: lint
          command: |
            ./scripts/lint-download.sh
            make lint-check-diff
    environment:
      GO111MODULE: "on"

# integration
  integration-tests:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            sudo ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: "Install kubectl"
          command: |
            sudo ./scripts/install-kubectl.sh
      - run:
          name: "Install GKE deps"
          command: |
            sudo ./scripts/gke/install-gcloud-sdk.sh
      - run:
          name: "Install Azure deps"
          command: |
            sudo ./scripts/azure/install-azure-cli.sh
      - run:
          name: "Init AWS"
          command: |
            ./scripts/aws/aws-init.sh
            sudo cp "$HOME/bin/aws-iam-authenticator" /usr/local/bin/aws-iam-authenticator
      - run:
          name: Downloading go deps
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            ./scripts/go-mod-download.sh
          no_output_timeout: 40m
      - run:
          name: Running integration tests
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export REPO="networkservicemeshci"
            export CONTAINER_REPO=${REPO}

            CGO_ENABLED=0 GOOS=linux go build -o ./cloudtest ./test/cloudtest/cmd/cloudtest
            ./cloudtest
          no_output_timeout: 40m
      - store_test_results:
          path: .tests/cloud_test/results/
      - store_artifacts:
          path: .tests/cloud_test/
      - store_artifacts:
          path: ~/postmortem
    environment:
      GO111MODULE: "on"
      NSM_NAMESPACE: "nsm-system-integration"

# build
  build-container:
    parameters:
      container:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            export CONTAINER_REPO="networkservicemeshci"
            make docker-<< parameters.container >>-build
            make docker-<< parameters.container >>-push

# build ready - empty job
  build-container-success:
    docker:
      - image: circleci/golang
    steps:
      - run:
          command: |
            echo "SUCCESS"

# docker push
  docker-push-tag:
    docker:
      - image: circleci/golang
    parameters:
      tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export PULL_TAG="${COMMIT}"
            export TAG="<< parameters.tag >>"
            export REPO="networkservicemesh"
            export PULL_REPO="networkservicemeshci"
            export CONTAINERS=(nsmd nsmd-k8s nsmdp)
            export CONTAINERS=(${CONTAINERS[@]} crossconnect-monitor nsm-init admission-webhook)
            export CONTAINERS=(${CONTAINERS[@]} vppagent-dataplane vppagent-dataplane-dev)
            export CONTAINERS=(${CONTAINERS[@]} test-common vpp-test-common)
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            for c in ${CONTAINERS[@]}; do
              docker pull ${PULL_REPO}/${c}:${PULL_TAG}
              docker tag ${PULL_REPO}/${c}:${PULL_TAG} ${REPO}/${c}:${TAG}
              docker push ${REPO}/${c}:${TAG}
            done

# helm
  test-helm-charts:
    docker:
      - image: quay.io/helmpack/chart-testing:v2.3.0
    steps:
      - checkout
      - run:
          name: Install and lint Helm charts
          command: |
            .circleci/helm/test-charts.sh

# workflows
workflows:
  version: 2
  build-and-test:
    jobs:
      - test-sanity-check
      - test-static-code-analysis:
          name: "test-static-code-analysis"
          requires:
            - test-sanity-check
# build
      - build-container:
          name: "build-nsmd"
          container: "nsmd"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsmd-k8s"
          container: "nsmd-k8s"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsmdp"
          container: "nsmdp"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-admission-webhook"
          container: "admission-webhook"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-crossconnect-monitor"
          container: "crossconnect-monitor"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-test-common"
          container: "test-common"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vpp-test-common"
          container: "vpp-test-common"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsm-init"
          container: "nsm-init"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vppagent-dataplane"
          container: "vppagent-dataplane"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vppagent-dataplane-dev"
          container: "vppagent-dataplane-dev"
          requires:
            - test-sanity-check
      - build-container-success:
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-test-common
            - build-vpp-test-common
            - build-nsm-init
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev

# Integration testing
      - integration-tests:
          name: "test-integration"
          requires:
            - build-container-success
# helm
      - test-helm-charts:
          name: "test-helm-charts"
          requires:
            - test-sanity-check

# push
      - docker-push-tag:
          tag: "master"
          requires:
            - test-integration
          filters:
            branches:
              only: master

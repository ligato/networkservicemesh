---
version: 2.1

jobs:
  sanity-check:
    resource_class: medium+
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run: go version
      - run: until go mod download;do echo "Trying again";done
      - run: "! go fmt ./... 2>&1 | read"
      - run:
          name: golint
          command: |
            go get golang.org/x/lint/golint@v0.0.0-20190227174305-8f45f776aaf1
            golint ./...
      - run: make vet check
      - run: go install k8s.io/code-generator/cmd/deepcopy-gen
      - run: go install github.com/golang/protobuf/protoc-gen-go
      - run: go get golang.org/x/tools/cmd/stringer
      - run: ./scripts/install-protoc.sh
      # - run: go generate ./...
      - run: go build ./...
      - run: mkdir -p ~/junit/
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export CONTAINER_FORCE_PULL="true"
            gotestsum --junitfile ~/junit/unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

    environment:
      GO111MODULE: "on"

  packet-deploy:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
      - run: unzip terraform_0.11.13_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir data
      - run: ssh-keygen -t rsa -f data/sshkey -q -N ""
      - run: ssh-add data/sshkey
      - run: .circleci/provision.sh
      - run: cd scripts/terraform && PACKET_CLUSTER_ID=1 ./create-kubernetes-cluster.sh && cd ../..
      - run: cd scripts/terraform && PACKET_CLUSTER_ID=2 ./create-kubernetes-cluster.sh && cd ../..
      - run: PACKET_CLUSTER_ID=1 make packet-get-kubeconfig
      - run: PACKET_CLUSTER_ID=2 make packet-get-kubeconfig
      - run: cp kubeconfig1 kubeconfig2 data/
      - run: cp -a scripts/terraform/ data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  packet-integration-tests:
    parameters:
      cluster_id:
        type: string
      test_tags:
        type: string
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          name: Downloading go deps
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            # export CONTAINER_FORCE_PULL="true"
            ./scripts/prepare-circle-integration-tests.sh
            mkdir -p ~/junit/
            go mod download
          no_output_timeout: 40m
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig<< parameters.cluster_id >>
            GO111MODULE: "on"
      - run:
          name: Running integration tests - <<parameters.test_tags>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            gotestsum --junitfile ~/junit/integration-tests-basic.xml -f standard-verbose ./test/... -timeout 30m -failfast -tags="<<parameters.test_tags>>"
          no_output_timeout: 40m
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig<< parameters.cluster_id >>
            GO111MODULE: "on"
      - run:
          when: always
          name: Save postmortem data
          command: |
            make packet-download-postmortem
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig<< parameters.cluster_id >>
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl get nodes
            kubectl get pods -o wide
            kubectl describe pods
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig<< parameters.cluster_id >>
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH

  packet-destroy:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
      - run: unzip terraform_0.11.13_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: cp -a data/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: .circleci/destroy-cluster.sh

  build-container:
    parameters:
      container:
        type: string
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            make docker-<< parameters.container >>-build
            make docker-<< parameters.container >>-push

  docker-push-latest:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export PULL_TAG="${COMMIT}"
            export TAG="latest"
            export REPO="networkservicemesh"
            export CONTAINERS=(nsmd nsmd-k8s nsmdp crossconnect-monitor icmp-responder-nse vppagent-icmp-responder-nse vppagent-nsc nsc vppagent-dataplane vppagent-dataplane-dev admission-webhook)
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            for c in ${CONTAINERS[@]}; do
              docker pull ${REPO}/${c}:${PULL_TAG}
              docker tag ${REPO}/${c}:${PULL_TAG} ${REPO}/${c}:${TAG}
              docker push ${REPO}/${c}:${TAG}
            done

workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - build-container:
          name: "build-nsmd"
          container: "nsmd"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmd-k8s"
          container: "nsmd-k8s"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmdp"
          container: "nsmdp"
          requires:
            - sanity-check
      - build-container:
          name: "build-admission-webhook"
          container: "admission-webhook"
          requires:
            - sanity-check
      - build-container:
          name: "build-crossconnect-monitor"
          container: "crossconnect-monitor"
          requires:
            - sanity-check
      - build-container:
          name: "build-icmp-responder-nse"
          container: "icmp-responder-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-icmp-responder-nse"
          container: "vppagent-icmp-responder-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-nsc"
          container: "vppagent-nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsc"
          container: "nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane"
          container: "vppagent-dataplane"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane-dev"
          container: "vppagent-dataplane-dev"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-firewall-nse"
          container: "vppagent-firewall-nse"
          requires:
            - sanity-check
      - packet-deploy:
          requires:
            - sanity-check
      - packet-integration-tests:
          name: "test basic recover"
          cluster_id: "1"
          test_tags: "basic recover"
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-firewall-nse
            - packet-deploy
      - packet-integration-tests:
          name: "test usecase"
          cluster_id: "2"
          test_tags: "usecase"
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-firewall-nse
            - packet-deploy
      - packet-destroy:
          requires:
            - "test basic recover"
            - "test usecase"
      - docker-push-latest:
          requires:
            - packet-destroy
          filters:
            branches:
              only: master

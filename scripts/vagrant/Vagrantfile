# -*- mode: ruby -*-
# vi: set ft=ruby :

WORKER_COUNT = ENV['WORKER_COUNT'].nil? ? 1 : ENV['WORKER_COUNT'].to_i
KUBERNETES_VERSION_OR_DEFAULT = ENV['KUBERNETES_VERSION'] || "1.16.3-00"
KUBERNETES_INIT_VERSION_OR_DEFAULT = ENV['KUBERNETES_INIT_VERSION'] || "1.16.3"

VM_BOX = "bento/ubuntu-19.04"
RAM_SIZE = 2048
CPU_COUNT = 2
Vagrant.configure("2") do |config|

  config.vm.synced_folder "../..", "/go/src/github.com/networkservicemesh/networkservicemesh",
    id: "source-folder"
  config.vm.synced_folder ".", "/vagrant",
    id: "vagrant"
  config.vm.synced_folder "../../build/images", "/images",
      id: "images"
  config.vm.allowed_synced_folder_types = [:virtualbox, :vmware, :sshfs]

  config.vm.box = VM_BOX
  config.vm.box_download_insecure = true

  config.vm.provider "libvirt" do |v, override|
    v.memory = RAM_SIZE
    v.cpus = CPU_COUNT
  end
  config.vm.provider "virtualbox" do |v, override|
    v.memory = RAM_SIZE
    v.cpus = CPU_COUNT
  end
  config.vm.provider "vmware_desktop" do |v, override|
    v.vmx["memsize"] = RAM_SIZE
    v.vmx["numvcpus"] = CPU_COUNT
  end
  config.vm.provider "vmware_fusion" do |v, override|
    v.vmx["memsize"] = RAM_SIZE
    v.vmx["numvcpus"] = CPU_COUNT
  end
  config.vm.network "private_network", type: "dhcp"

  config.vm.provision "shell", path: "scripts/install_sources.sh"
  config.vm.provision "shell", path: "scripts/install_docker.sh"
  config.vm.provision "shell", path: "scripts/install_kubernetes.sh", env: {KUBERNETES_VERSION:KUBERNETES_VERSION_OR_DEFAULT}
  config.vm.provision "shell", inline: "sudo usermod -a -G docker vagrant"
  config.vm.provision "shell", inline: "mkdir -p /var/lib/networkservicemesh"

  config.vm.define "master" do |master|
    master.vm.hostname = "kube-master"
    master.vm.provision "shell", path: "scripts/configureK8smaster.sh", env: {KUBERNETES_INIT_VERSION:KUBERNETES_INIT_VERSION_OR_DEFAULT}
    master.vm.provision "shell", path: "scripts/coredump.sh"
  end

  (1..WORKER_COUNT).each do |i|
    config.vm.define "worker#{i}" do |worker|
      worker.vm.hostname = "kube-worker#{i}"
      worker.vm.provision "shell", path: "scripts/configureK8sworker.sh"
      worker.vm.provision "shell", path: "scripts/coredump.sh"
    end
  end
end
